<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charli</title>
  <icon>https://www.gravatar.com/avatar/a9f20b334b612fb41766f27517bdfacb</icon>
  <subtitle>梦想的起源</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Lifuzhen.github.io/"/>
  <updated>2023-03-16T06:35:16.645Z</updated>
  <id>https://Lifuzhen.github.io/</id>
  
  <author>
    <name>Charli</name>
    <email>1342786307@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>deepClone深拷贝</title>
    <link href="https://Lifuzhen.github.io/2023/03/15/deepClone%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>https://Lifuzhen.github.io/2023/03/15/deepClone深拷贝/</id>
    <published>2023-03-15T14:00:24.000Z</published>
    <updated>2023-03-16T06:35:16.645Z</updated>
    
    <content type="html"><![CDATA[<p>//空间换时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default function memo(func, hasher)&#123;</span><br><span class="line">const cache = &#123;&#125;;</span><br><span class="line">return function(...args)&#123;</span><br><span class="line">let key = &quot;&quot;+(hasher ? hasher(...args) : args[0])</span><br><span class="line">if(!cache[key])&#123;</span><br><span class="line">cache[key] = function(...args);</span><br><span class="line">&#125;</span><br><span class="line">return cache[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON.parse(JSON.stringfy())<br>实现深拷贝—缺陷：不能拷贝Symbol、函数、循环引用。</p><p>深拷贝——简介版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function deepClone = obj =&gt; &#123;</span><br><span class="line">if(typeof obj != &quot;object&quot; || obj === null)&#123;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line">let result;</span><br><span class="line">if(base instanceof Array)&#123;</span><br><span class="line">result = [];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">result = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">for(let item in base)&#123;</span><br><span class="line">if(base.hasOwnProperty(item))&#123;</span><br><span class="line">result[item] = deepClone(base[item])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝—— 可以解决循环引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export default deepClone = base =&gt;&#123;</span><br><span class="line">const baseStack=[];</span><br><span class="line">const targetStack = [];</span><br><span class="line">let _clone = base =&gt; &#123;</span><br><span class="line">if(typeof base != &quot;object&quot; || base === null)&#123;</span><br><span class="line">return base;</span><br><span class="line">&#125;</span><br><span class="line">let target = &#123;&#125;;</span><br><span class="line">if(Array.isArray(base))&#123;</span><br><span class="line">target = [];</span><br><span class="line">&#125;</span><br><span class="line">const index = baseStack.indexOf(base);</span><br><span class="line">if(index != -1)&#123;</span><br><span class="line">return targetStack[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baseStack.push(base);</span><br><span class="line">targetStack.push(target);</span><br><span class="line"></span><br><span class="line">for(let i in base)&#123;</span><br><span class="line">target[i] = _clone(base[i]);_</span><br><span class="line">&#125;</span><br><span class="line">return target;</span><br><span class="line">&#125;_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;//空间换时间&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git config中name和email问题</title>
    <link href="https://Lifuzhen.github.io/2023/02/17/git%20config%E4%B8%ADname%E5%92%8Cemail%E9%97%AE%E9%A2%98/"/>
    <id>https://Lifuzhen.github.io/2023/02/17/git config中name和email问题/</id>
    <published>2023-02-17T06:13:47.000Z</published>
    <updated>2023-02-17T06:13:58.105Z</updated>
    
    <content type="html"><![CDATA[<p>1233123</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1233123&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>(一)两数之和</title>
    <link href="https://Lifuzhen.github.io/2021/11/15/(%E4%B8%80)%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://Lifuzhen.github.io/2021/11/15/(一)两数之和/</id>
    <published>2021-11-15T13:58:22.000Z</published>
    <updated>2023-02-17T06:11:31.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p>给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 <strong>和为目标值</strong>  <em>target</em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></p><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 104</li><li>-109 &lt;= nums[i] &lt;= 109</li><li>-109 &lt;= target &lt;= 109</li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p><hr><p>解题1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var twoSum = function(nums, target)&#123;</span><br><span class="line">    for(let i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">        let num2 = target - nums[i];</span><br><span class="line">        if(nums.includes(num2) &amp;&amp; nums.indexOf(num2) != i)&#123;</span><br><span class="line">            return [i, nums.indexOf(num2)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const twoSum = (nums, target) =&gt; &#123;</span><br><span class="line">  const prevNums = &#123;&#125;;                         // 存放出现过的数字，和对应的索引</span><br><span class="line">  for (let i = 0; i &lt; nums.length; i++) &#123;      // 遍历每一项</span><br><span class="line">    const curNum = nums[i];                    // 当前项</span><br><span class="line">    const targetNum = target - curNum;         // 希望从过去的数字中找到的呼应项</span><br><span class="line">    const targetNumIndex = prevNums[targetNum];// 在prevNums中找targetNum的索引</span><br><span class="line">    if (targetNumIndex !== undefined) &#123;        // 如果能找到</span><br><span class="line">      return [targetNumIndex, i];              // 直接返回targetNumIndex和当前的i</span><br><span class="line">    &#125;                                          // 如果找不到，说明之前没出现过targetNum</span><br><span class="line">    prevNums[curNum] = i;                      // 往prevNums存当前curNum和对应的i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;两数之和&quot;&gt;&lt;a href=&quot;#两数之和&quot; class=&quot;headerlink&quot; title=&quot;两数之和&quot;&gt;&lt;/a&gt;两数之和&lt;/h1&gt;&lt;p&gt;给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 &lt;strong&gt;和为目标值&lt;/strong&gt; 
      
    
    </summary>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="力扣" scheme="https://Lifuzhen.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>alternate of undefined</title>
    <link href="https://Lifuzhen.github.io/2021/04/16/alternate%20of%20undefined/"/>
    <id>https://Lifuzhen.github.io/2021/04/16/alternate of undefined/</id>
    <published>2021-04-16T13:37:21.000Z</published>
    <updated>2022-05-24T10:35:59.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一天还可以好好运行的项目,第二天打开就报错了.<br>没有什么改动,真的是感觉代码有毒~<br>既然碰到了这个坑,那就先跳再说</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>项目使用的react版本为16.10.0<br>但是2021-03-22 react官方更新了17.0.2的版本，导致我的项目报了alternate of undefined，就很奇怪的问题，我就添加debugger一步一步的找问题<br><img src="/2021/04/16/alternate of undefined/bug.png" alt=""></p><p>左边是react16.8.6下运行的显示的有_reactInternalFiber这个属性，但是右边的就没有这个属性，react16的大版本都是用的Fiber，没有找到这个属性，所以后续就报错了<br><img src="/2021/04/16/alternate of undefined/01.png" alt=""><br><img src="/2021/04/16/alternate of undefined/02.jpg" alt=""></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>网上去找这个问题的解决方案,很多人说是版本的问题.<br>然后就更新版本，把react、react-dom和react-art 都统一更新到17.0.2的版本，这个问题就解决了。<br>看网上说最好是保证这三个使用的插件大版本是同一个</p><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>（PS：为什么react更新版本导致了这个项目的问题呢，没有检查到项目中是否有用到云版本~    待解决！！！）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前一天还可以好好运行的项目,第二天打开就报错了.&lt;br&gt;没有什么改动,真的是感觉代码有毒~&lt;br&gt;既然碰到了这个坑,那就先跳再说&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="react" scheme="https://Lifuzhen.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://Lifuzhen.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>git学习指南</title>
    <link href="https://Lifuzhen.github.io/2021/04/12/git%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <id>https://Lifuzhen.github.io/2021/04/12/git学习指南/</id>
    <published>2021-04-11T16:10:30.000Z</published>
    <updated>2022-05-24T10:35:59.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>那天心血来潮去上图看书了,拿了一本《git学习指南》，还挺厚的一本书，我就走马观花似的看了一遍，记录一下我的摘抄。</p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>–format、–oneline 格式化输出<br>–stat、–shortstat 统计信息修改<br>–grph  日志选项<br>–interactive  代码段选取</p><p>git diff 文件名   //查看被修改的行<br>git rm 文件名   //删除文件<br>git log       //显示历史<br>git clone –bare ***.git    //创建裸版本库</p><p>git log -n 3  //only the last three commits<br>git log –online //only one line per commit<br>git log –stat //only show statistics<br>git log –graph –online  //各提交之间的关系<br>git staus 中的文件可以使用   git reset HEAD(重置为当前的HEAD版本)  ***文件  移出暂存区 </p><p>git status –short<br>git stash<br>git stash pop<br>git stash list<br>git stash pop <strong>文件<br>git log –summary -m90% | grep -e “^rename” 百分比显示源文件和目标文件的相似度<br>git log –follow </strong>文件 //连续读取文件被重命名之后的历史记录<br>git blame -M -C -C -C <strong>文件 //确定文件来源<br>git branch //查看分支<br>git checkout -b </strong>分支   //创建并切换到新分支<br>git branch -d <strong>分支  //删除分支<br>git branch </strong>分支  **分支散列值    // 恢复某个分支<br>git reflog  // 列取散列值<br>git reset merge  //取消合并<br>git remote –verbose   //显示用于获取或推送提交的路径<br>git branch -r //跟踪分支<br>git pull –rebase</p><p>git tag  //创建标签<br>git show -ref –dereference –tags  //打印标签的散列值<br>git log –oneline –decorate  //将标签添加到日志输出中<br>git log -l  //显示所有标签<br>git log –walk-reflogs mybranch  //显示一个分支的本地历史记录<br>git diff<br>git diff –word-diff    //按单词显示所做的修改<br>git diff –word-diff=color    //使用不同的颜色显示文件中的不同<br>git config –global alias.ci commit   //commit的别名为ci<br>git config –global alias.st status  //设置status的别名为st<br>git rebase 变基</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;那天心血来潮去上图看书了,拿了一本《git学习指南》，还挺厚的一本书，我就走马观花似的看了一遍，记录一下我的摘抄。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在React Hooks中使用生命周期方法</title>
    <link href="https://Lifuzhen.github.io/2021/03/16/%E5%9C%A8React%20Hooks%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95/"/>
    <id>https://Lifuzhen.github.io/2021/03/16/在React Hooks中使用生命周期方法/</id>
    <published>2021-03-16T10:48:03.000Z</published>
    <updated>2022-05-24T10:35:59.483Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自于<a href="https://www.sollrei.me/post/frontend/2019-05-28" target="_blank" rel="noopener">Sollrei</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为项目上用到了hooks+ts，在使用定时任务的时候，退出当前组件时，仍然会执行定时任务，但是在hooks中没有componentWillUnMount方法，所以就网上查找资料。</p><h3 id="React新版本的生命周期"><a href="#React新版本的生命周期" class="headerlink" title="React新版本的生命周期"></a>React新版本的生命周期</h3><p><img src="/2021/03/16/在React Hooks中使用生命周期方法/01.jpg" alt=""></p><blockquote><p>react 16.3之后新增了两个生命周期getDerivedStateFromProps和getSnapshotBeforeUpdate，并且原来的componentWillMount，componentWillReceiveProps以及componentWillUpdate将被移除。</p></blockquote><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>函数组件不用写constructor，用useState初始化state</p><h3 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h3><blockquote><p>这个方法基本用来替代componentWillReceiveProps，它是个静态方法，也就是说不能访问this，也就是说不能改this.state</p></blockquote><p>官方栗子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView</span>(<span class="params">&#123;row&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [isScrollingDown, setIsScrollingDown] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">let</span> [prevRow, setPrevRow] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (row !== prevRow) &#123;</span><br><span class="line">    <span class="comment">// 上次渲染后row发生变化  更新isScrollingDown.</span></span><br><span class="line">    setIsScrollingDown(prevRow !== <span class="literal">null</span> &amp;&amp; row &gt; prevRow);</span><br><span class="line">    setPrevRow(row);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Scrolling down: <span class="subst">$&#123;isScrollingDown&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>使用React.memo，类似PureComponent，但它只对比props的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Demo = React.memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对子组件可以使用useMemo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">&#123; a, b &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 只在a变化时re-render</span></span><br><span class="line">  <span class="keyword">const</span> child1 = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;Child1 a=&#123;a&#125; /&gt;, [a]);</span><br><span class="line">  <span class="comment">// 只在b变化时re-render</span></span><br><span class="line">  <span class="keyword">const</span> child2 = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;Child2 b=&#123;b&#125; /&gt;, [b]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;child1&#125;</span><br><span class="line">      &#123;child2&#125;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>那就是函数它自个儿了……<br>下面几个可以使用useEffect(fn, […watchStates])实现的</p><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>第二个参数传空数组</p><blockquote><p>这么写在useEffect里使用一些state的时候会报错”missing dependency”，暂时用了eslint-disable-line</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = title;</span><br><span class="line">    <span class="comment">// do ...</span></span><br><span class="line">  &#125;, []); <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 点击文字是 hello world world .... 但是页面title是hello</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><p>只传一个参数，每次render就都会调用这个函数，和componentDidUpdate不同的是第一次render也会执行它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = title;</span><br><span class="line">    <span class="comment">// do ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>如果不希望在第一次（初始）render时候调用，可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line">  <span class="keyword">const</span> first = useRef(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  useLayoutEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (first.current) &#123;</span><br><span class="line">      first.current = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.title = title;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidUpdateFunction"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p>在useEffect的第一个函数参数中返回一个函数，这个函数就会在unmount时候被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'componentWillUnmount'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>最后最后componentDidCatch和getDerivedStateFromError暂时还不能用Hook来实现，暂时。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文来自于&lt;a href=&quot;https://www.sollrei.me/post/frontend/2019-05-28&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sollrei&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; c
      
    
    </summary>
    
    
      <category term="react" scheme="https://Lifuzhen.github.io/tags/react/"/>
    
      <category term="hooks" scheme="https://Lifuzhen.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号h5跳转小程序</title>
    <link href="https://Lifuzhen.github.io/2021/01/18/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7h5%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://Lifuzhen.github.io/2021/01/18/微信公众号h5跳转小程序/</id>
    <published>2021-01-18T12:21:39.000Z</published>
    <updated>2022-05-24T10:35:59.460Z</updated>
    
    <content type="html"><![CDATA[<p> 最近在公司做活动，遇到了h5活动页面唤起小程序的需求, 找了资料，发现了wx-open-launch-open。<br> <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html" target="_blank" rel="noopener">微信官方文档</a> 支持了这种跳转，不过对微信版本、系统版本都有要求。</p><p> 因为需求需要判断当前用户是否支持，不支持则显示别的内容，支持就点击后直接跳转到小程序。开始我的探索路</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p> 这个微信官方文档里面说的很清楚，登录<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p><h2 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h2><p> 在需要调用JS接口的页面引入如下JS文件：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）</p><p> 如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）</p><p> 备注：支持使用 AMD/CMD 标准模块加载方法加载<br> （ps：因为我们的h5页面是https， 所以引入的连接要是https的，不然会有问题呦）</p><h2 id="通过config接口注入权限验证配置并申请所需开放标签"><a href="#通过config接口注入权限验证配置并申请所需开放标签" class="headerlink" title="通过config接口注入权限验证配置并申请所需开放标签"></a>通过config接口注入权限验证配置并申请所需开放标签</h2><p> 与使用JS-SDK配置方式相同，所有需要使用开放标签的页面必须先注入配置信息，并通过openTagList字段申请所需要的开放标签，否则将无法使用（同一个url仅需调用一次）。开放标签的申请和JS接口的申请相互独立，因此是可以同时申请的。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印</span><br><span class="line">  appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class="line">  timestamp: , // 必填，生成签名的时间戳</span><br><span class="line">  nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class="line">  signature: &apos;&apos;,// 必填，签名</span><br><span class="line">  jsApiList: [], // 必填，需要使用的JS接口列表</span><br><span class="line">  openTagList: [] // 可选，需要使用的开放标签列表，例如[&apos;wx-open-launch-app&apos;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="通过ready接口处理成功验证"><a href="#通过ready接口处理成功验证" class="headerlink" title="通过ready接口处理成功验证"></a>通过ready接口处理成功验证</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(function () &#123;</span><br><span class="line">  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="通过error接口处理失败验证"><a href="#通过error接口处理失败验证" class="headerlink" title="通过error接口处理失败验证"></a>通过error接口处理失败验证</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.error(function (res) &#123;</span><br><span class="line">  // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>所有开放标签都能像普通的HTML标签一样在页面中直接使用，不需要再进行额外的处理。</p><blockquote><p>(ps: 我们使用的是react，所有也是使用的script)</p></blockquote><p>对于标签事件，均可通过event.detail获得详细信息。如果无特殊说明，下文标签事件说明中的返回值均指代event.detail中的内容。</p><p>另外，需要注意以下几点：如果所使用的标签允许提供插槽，由于插槽中模版的样式是和页面隔离的，因此需要注意在插槽中定义模版的样式。插槽模版及样式均需要通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>进行包裹。对于Vue等视图框架，为了避免template标签冲突的问题，可使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/wxtag-template&quot;&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure></p><p>进行代替，来包裹插槽模版和样式。另外，对于具名插槽还需要通过slot属性声明插槽名称，下文标签插槽中的default插槽为默认插槽，可不声明插槽名称。</p><p>页面中与布局和定位相关的样式，如position: fixed; top -100;等，尽量不要写在插槽模版的节点中，请声明在标签或其父节点上；<br>对于有CSP要求的页面，需要添加白名单frame-src https://*.qq.com webcompt:，才能在页面中正常使用开放标签。</p><h1 id="使用过程中的问题"><a href="#使用过程中的问题" class="headerlink" title="使用过程中的问题"></a>使用过程中的问题</h1><h2 id="跳转小程序按钮没有显示"><a href="#跳转小程序按钮没有显示" class="headerlink" title="跳转小程序按钮没有显示"></a>跳转小程序按钮没有显示</h2><p>没有起作用有好几个方便的原因：<br>1.微信公众号必须是服务号。要在公众号后台配置js安全域名  和 ip白名单<br>2.真机测试，才会显示（我使用微信开发者工具也不会显示的）<br>3、username=小程序的原始id，以gh开头的，不是小程序wx开头的id<br>4、path=‘<strong>*</strong>.html’后面要以.html结尾（这个微信官方文档也有写）<br>5、openTagList: [“wx-open-launch-weapp”]    config配置参数必须填这个开放接口</p><h2 id="自定义图片按钮"><a href="#自定义图片按钮" class="headerlink" title="自定义图片按钮"></a>自定义图片按钮</h2><p>1、图片连接必须是线上的，不能是本地图片，不然不会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;banner-button&quot;&gt;</span><br><span class="line">    &lt;wx-open-launch-weapp</span><br><span class="line">        id=&quot;launch-btn&quot;</span><br><span class="line">        username=&#123;this.state.miniUsername&#125;</span><br><span class="line">        path=&#123;this.state.miniPath&#125;</span><br><span class="line">        style=&#123;&#123;width: &quot;150px&quot;, height: &quot;32px&quot;, fontSize: &quot;23px&quot;&#125;&#125;&gt;</span><br><span class="line">        &lt;script type=&quot;text/wxtag-template&quot;&gt;</span><br><span class="line">            &lt;img style=&#123;&#123;width: &quot;100%&quot;&#125;&#125; src=&quot;https://images-1254198035.cos.ap-shanghai.myqcloud.com/qipai/btn.png&quot; alt=&quot;&quot;/&gt; (线上图片会显示)</span><br><span class="line">            &lt;img style=&#123;&#123;width: &quot;100%&quot;&#125;&#125; src=&quot;../image/btn.png&quot; alt=&quot;&quot;/&gt;(本地图片不会显示)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/wx-open-launch-weapp&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="跳转小程序按钮样式不起作用"><a href="#跳转小程序按钮样式不起作用" class="headerlink" title="跳转小程序按钮样式不起作用"></a>跳转小程序按钮样式不起作用</h2><p>注意：样式无法写在外面，只能使用内联样式。固定大小的样式不支持rem单位，不会继承样式</p><h2 id="判断当前是否支持wx-open-launch-open按钮-手机不支持wx-open-launch-open"><a href="#判断当前是否支持wx-open-launch-open按钮-手机不支持wx-open-launch-open" class="headerlink" title="判断当前是否支持wx-open-launch-open按钮(手机不支持wx-open-launch-open)"></a>判断当前是否支持wx-open-launch-open按钮(手机不支持wx-open-launch-open)</h2><p>因为需要对不支持wx-open-launch-open按钮的做判断，显示另一个页面，所以需要判断当前手机是否支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// wx-open-launch-weapp按钮 微信版本要求为：7.0.12及以上。 系统版本要求为：iOS 10.3及以上、Android 5.0及以上。</span><br><span class="line">  var wechatInfo = navigator.userAgent.match(/MicroMessenger\/([\d\.]+)/i);</span><br><span class="line">  console.log(&quot;wechatInfo:&quot;, wechatInfo &amp;&amp; wechatInfo[1]);</span><br><span class="line">  // Android 5.0及以上</span><br><span class="line">  var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">  console.log(ua);</span><br><span class="line">  if (!wechatInfo) &#123;</span><br><span class="line">      console.log(&quot;仅支持微信&quot;) ;</span><br><span class="line">  &#125; else if (wechatInfo[1] &lt; &quot;7.0.12&quot;) &#123;</span><br><span class="line">      console.log(&quot;微信版本要求7.0.12及以上版本&quot;)</span><br><span class="line">  &#125; else if (/android/i.test(navigator.userAgent)) &#123;</span><br><span class="line">      var test = /android\s([\w.]+)/;//IE</span><br><span class="line">      var match = test.exec(ua);</span><br><span class="line">      console.log(match);</span><br><span class="line">      document.write(&quot;This is Android &quot; + match[1] + &quot; browser.&quot;); //这是Android平台下浏览器</span><br><span class="line">      var version = match[1].split(&quot;.&quot;)[0];</span><br><span class="line">      if (version &lt; 5) &#123;</span><br><span class="line">          console.log(&apos;Android系统要求5.0及以上版本&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; else if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) &#123;</span><br><span class="line">      var test = /os\s([\w_]+)/;//IE</span><br><span class="line">      var match = test.exec(ua);</span><br><span class="line">      var version = match[1].split(&quot;_&quot;)[0] + &quot;.&quot; + match[1].split(&quot;_&quot;)[1];</span><br><span class="line">      console.log(version);</span><br><span class="line">      if (version &lt; 10.4) &#123;</span><br><span class="line">          console.log(&apos;ios系统要求10.3及以上版本&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>很多东西网上都是可以找到的， 这里面大部分内容都是我在网上可以看到的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 最近在公司做活动，遇到了h5活动页面唤起小程序的需求, 找了资料，发现了wx-open-launch-open。&lt;br&gt; &lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wecha
      
    
    </summary>
    
    
      <category term="公众号" scheme="https://Lifuzhen.github.io/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="h5" scheme="https://Lifuzhen.github.io/tags/h5/"/>
    
      <category term="小程序" scheme="https://Lifuzhen.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>react-json-view</title>
    <link href="https://Lifuzhen.github.io/2020/11/27/react-json-view/"/>
    <id>https://Lifuzhen.github.io/2020/11/27/react-json-view/</id>
    <published>2020-11-27T03:45:06.000Z</published>
    <updated>2022-05-24T10:35:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-json-view-rjv"><a href="#react-json-view-rjv" class="headerlink" title="react-json-view(rjv)"></a>react-json-view(rjv)</h2><p>最近项目上引入了一个json解析的插件，我就把这个插件应用到了原来只有技术看的代码块上，现在在去看那个代码块，感觉清晰好多~<br>很棒的一个插件，简单介绍下这个插件<br><a href="https://www.npmjs.com/package/react-json-view" target="_blank" rel="noopener">npm地址</a></p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p> npm install react-json-view</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>“dependencies”: {<br>    “react-json-view”: “latest”<br>}</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactJson from &quot;react-json-view&quot;;</span><br><span class="line"></span><br><span class="line">class ReactJsonView extends React.Component&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        my_json_object: &#123;</span><br><span class="line">            &quot;string&quot;: &quot;this is a test string&quot;,</span><br><span class="line">            &quot;integer&quot;: 42,</span><br><span class="line">            &quot;array&quot;: [1,2,3,&quot;test&quot;,null],</span><br><span class="line">            &quot;float&quot;: 3.14159,</span><br><span class="line">            &quot;object&quot;: &#123;&quot;first-child&quot;: true,&quot;second-child&quot;: false,&quot;last-child&quot;: null&#125;,</span><br><span class="line">            &quot;string_number&quot;: &quot;1234&quot;,</span><br><span class="line">            &quot;date&quot;: &quot;2020-12-01T04:02:13.464Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;ReactJson src=&#123;this.state.my_json_object&#125; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ReactJsonView;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><img src="/2020/11/27/react-json-view/result01.jpg" alt=""></p><h2 id="属性简介"><a href="#属性简介" class="headerlink" title="属性简介"></a>属性简介</h2><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><pre><code>类型： json对象默认值： 没有描述：这里的值显示的是json数据</code></pre><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><pre><code>类型：string或这个是false默认值： &quot;root&quot;描述： 这里是根节点的名字，如果取值为null或者false则没有名字</code></pre><h4 id="name取值对比图"><a href="#name取值对比图" class="headerlink" title="name取值对比图"></a>name取值对比图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ReactJson</span><br><span class="line">    src=&#123;this.state.my_json_object&#125;</span><br><span class="line">    name=&#123;false&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/27/react-json-view/name.jpg" alt=""></p><h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><pre><code>类型：string默认值：rjv-default描述：rjv支持base-16主题。包括（apathy，apathy:inverted，ashes，bespin，brewer，bright:inverted，bright，chalk，codeschool，colors，eighties，embers，flat，google，grayscale，grayscale:inverted，greenscreen，harmonic，hopscotch，isotope，marrakesh，mocha，monokai，ocean，paraiso，pop，railscasts，rjv-default，shapeshifter，shapeshifter:inverted，solarized，summerfruit，summerfruit:inverted，threezerotwofour，tomorrow，tube，twilight）</code></pre><h4 id="theme取值对比图"><a href="#theme取值对比图" class="headerlink" title="theme取值对比图"></a>theme取值对比图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ReactJson</span><br><span class="line">   src=&#123;this.state.my_json_object&#125;</span><br><span class="line">   name=&#123;false&#125;</span><br><span class="line">   theme=&quot;shapeshifter&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/27/react-json-view/theme.jpg" alt=""></p><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><pre><code>类型：object默认值：{}描述：可以通过style添加、修改样式，可覆盖主题默认提供的属性</code></pre><h3 id="iconStyle"><a href="#iconStyle" class="headerlink" title="iconStyle"></a>iconStyle</h3><pre><code>类型：string默认值：&quot;circle&quot;描述：接受参数:circle(圆)、triangle(三角形)、square(圆)</code></pre><p><img src="/2020/11/27/react-json-view/iconStyle.jpg" alt=""></p><h3 id="indentWidth"><a href="#indentWidth" class="headerlink" title="indentWidth"></a>indentWidth</h3><pre><code>类型：integer默认值：4描述：JSON嵌套对象的缩进值</code></pre><p><img src="/2020/11/27/react-json-view/indentWidth.jpg" alt=""></p><h3 id="collapsed"><a href="#collapsed" class="headerlink" title="collapsed"></a>collapsed</h3><pre><code>类型：boolean 或者 integer默认值：false描述：当设置为true，默认情况下，所有节点都将被折叠。使用整数值在特定深度折叠。</code></pre><p><img src="/2020/11/27/react-json-view/collapsed.jpg" alt=""></p><h3 id="collapseStringsAfterLength"><a href="#collapseStringsAfterLength" class="headerlink" title="collapseStringsAfterLength"></a>collapseStringsAfterLength</h3><pre><code>类型：integer默认值：false描述：这个就是超出内容会变成…的功能。当一个整数值被赋值时，字符串就会在这个长度后面接上省略号。可以通过单击字符串值来展开和折叠字符串内容</code></pre><h3 id="shouldCollapse"><a href="#shouldCollapse" class="headerlink" title="shouldCollapse"></a>shouldCollapse</h3><pre><code>类型：(field)=&gt;{}默认值：false描述：回调函数来提供对默认情况下应该折叠的对象和数组的控制。对象被传递给包含name, src, type(“数组”或“对象”)和namespace</code></pre><h3 id="groupArraysAfterLength"><a href="#groupArraysAfterLength" class="headerlink" title="groupArraysAfterLength"></a>groupArraysAfterLength</h3><pre><code>类型：integet默认值：100描述：当指定整数值时，数组将按值的计数分组显示。组以brakset符号显示，可以通过符号展开和折叠。</code></pre><p><img src="/2020/11/27/react-json-view/groupArrayAfterLength.jpg" alt=""></p><h3 id="enableClipboard"><a href="#enableClipboard" class="headerlink" title="enableClipboard"></a>enableClipboard</h3><pre><code>类型：boolean 或者 (copy)=&gt;{}默认值：true描述：当prop不为false时，用户可以通过单击剪贴板图标将对象和数组复制到剪贴板。支持复制回调。</code></pre><p><img src="/2020/11/27/react-json-view/enableClipboard.jpg" alt=""></p><h3 id="displayObjectSize"><a href="#displayObjectSize" class="headerlink" title="displayObjectSize"></a>displayObjectSize</h3><pre><code>类型：boolean默认值：true描述：当设置为true时，对象和数组将显示size</code></pre><p><img src="/2020/11/27/react-json-view/displayObjectSize.jpg" alt=""></p><h3 id="displayDataTypes"><a href="#displayDataTypes" class="headerlink" title="displayDataTypes"></a>displayDataTypes</h3><pre><code>类型：boolean默认值：true描述：当设置为true，value前面显示数据类型</code></pre><p><img src="/2020/11/27/react-json-view/displayDataTypes.jpg" alt=""></p><h3 id="onEdit"><a href="#onEdit" class="headerlink" title="onEdit"></a>onEdit</h3><pre><code>类型：(edit)=&gt;{}默认值：false描述：当传入回调函数时，edit功能已启用。在编辑完成之后调用回调。</code></pre><p><img src="/2020/11/27/react-json-view/onEdit.jpg" alt=""></p><h3 id="onAdd"><a href="#onAdd" class="headerlink" title="onAdd"></a>onAdd</h3><pre><code>类型：(add)=&gt;{}默认值：false描述：当传入回调函数时，add功能已启用。在完成添加之后调用回调。</code></pre><p><img src="/2020/11/27/react-json-view/onAdd.jpg" alt=""></p><h3 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h3><pre><code>类型：string||number||boolean||array||object默认值：null描述：设置添加到json时的默认值</code></pre><h3 id="onDelete"><a href="#onDelete" class="headerlink" title="onDelete"></a>onDelete</h3><pre><code>类型：(delete)=&gt;{}默认值：false描述：当传入回调函数时，delete功能已启用。在完成删除之后调用回调。</code></pre><p><img src="/2020/11/27/react-json-view/onDelete.jpg" alt=""></p><h3 id="onSelect"><a href="#onSelect" class="headerlink" title="onSelect"></a>onSelect</h3><pre><code>类型：(select)=&gt;{}默认值：false描述：当传入函数时，单击值将触发onSelect方法将被调用。</code></pre><h3 id="sortKeys"><a href="#sortKeys" class="headerlink" title="sortKeys"></a>sortKeys</h3><pre><code>类型：boolean默认值：false描述：当设置为true，根据对象的key排序</code></pre><p><img src="/2020/11/27/react-json-view/sortKeys.jpg" alt=""></p><h3 id="validationMessage"><a href="#validationMessage" class="headerlink" title="validationMessage"></a>validationMessage</h3><pre><code>类型：string默认值：“Validation Error”描述：针对OneEdit、onAdd或onDelete回调的验证失败的自定义消息</code></pre><p><a href="https://mac-s-g.github.io/react-json-view/demo/dist/" target="_blank" rel="noopener">Check out the list of supported themes in the component demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react-json-view-rjv&quot;&gt;&lt;a href=&quot;#react-json-view-rjv&quot; class=&quot;headerlink&quot; title=&quot;react-json-view(rjv)&quot;&gt;&lt;/a&gt;react-json-view(rjv)&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="插件" scheme="https://Lifuzhen.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ios手机不兼容摇一摇功能</title>
    <link href="https://Lifuzhen.github.io/2020/11/12/ios%E6%89%8B%E6%9C%BA%E4%B8%8D%E5%85%BC%E5%AE%B9%E6%91%87%E4%B8%80%E6%91%87%E5%8A%9F%E8%83%BD/"/>
    <id>https://Lifuzhen.github.io/2020/11/12/ios手机不兼容摇一摇功能/</id>
    <published>2020-11-12T14:22:59.000Z</published>
    <updated>2022-05-24T10:35:59.874Z</updated>
    
    <content type="html"><![CDATA[<p>过年后回来的时候做了一个摇一摇的H5小游戏。因为我使用的是安卓手机，一直没有发现在苹果手机上不能使用。<br>刚开是以为是http和https的问题，但是在ios上即使使用https开头的链接然后还是不能摇~</p><p>后来网上找了原因说是ios13+的版本，浏览器对设备运动和方向事件的访问权限处于关闭状态，但是可以请求这种权限，类似于请求相机权限吧。</p><p>因此，在IOS13+的移动端中，需要在DeviceMotionEvent上调用requestPermission这个方法，该方法请求用户当前来源的权限以显示通知，然后根据用户的不同选择，触发不同的状态【granted（被授予），denied（被拒绝） 或者default（默认）】，并返回一个Promise对象。</p><blockquote><p>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  var ua = navigator.userAgent.toLowerCase();</span><br><span class="line"> if (ua.indexOf(&quot;like mac os x&quot;) &gt; 0) &#123;</span><br><span class="line">     var reg = /os [\d._]*/gi;</span><br><span class="line">     var verinfo = ua.match(reg);</span><br><span class="line">     var version = (verinfo + &quot;&quot;).replace(/[^0-9|_.]/ig, &quot;&quot;).replace(/_/ig, &quot;.&quot;);</span><br><span class="line">     var arr = version.split(&quot;.&quot;);</span><br><span class="line">     if (arr[0] &gt; 13) &#123;  //对13以后的版本处理,</span><br><span class="line">         DeviceMotionEvent.requestPermission().then(permissionState =&gt; &#123;</span><br><span class="line">             if (permissionState === &quot;granted&quot;) &#123;</span><br><span class="line">                 alert(&quot;你授权了，可以进行摇一摇啦&quot;);</span><br><span class="line">             &#125;</span><br><span class="line">             if (permissionState === &quot;denied&quot;) &#123;</span><br><span class="line">                 alert(&quot;你拒绝了&quot;);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;).catch((err) =&gt; &#123;</span><br><span class="line">             //======这里可以防止重复授权，因为获取权限需要点击事件才能触发===//</span><br><span class="line">             Modal.warning(&#123;</span><br><span class="line">                 title: &apos;获取授权&apos;,</span><br><span class="line">                 content: &apos;请在接下来的然窗中允许授权，否则将无法正常进行摇一摇&apos;,</span><br><span class="line">                 onOk() &#123;</span><br><span class="line">                     reqShakePermission();</span><br><span class="line">                 &#125;,</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125; else &#123;  //13以前的版本</span><br><span class="line">         alert(&quot;你的手机支持摇一摇&quot;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line">     </span><br><span class="line">function reqShakePermission() &#123;</span><br><span class="line">    if (typeof DeviceMotionEvent.requestPermission === &quot;function&quot;) &#123;</span><br><span class="line">        DeviceMotionEvent.requestPermission().then((permissionState) =&gt; &#123;</span><br><span class="line">            if (permissionState === &quot;granted&quot;) &#123;</span><br><span class="line">                var speed = 15;    // 用来判定的加速度阈值，太大了则很难触发</span><br><span class="line">                var x, y, z, lastX, lastY, lastZ;</span><br><span class="line">                x = y = z = lastX = lastY = lastZ = 0;</span><br><span class="line">                window.addEventListener(&quot;devicemotion&quot;, function (event) &#123;</span><br><span class="line">                    var acceleration = event.accelerationIncludingGravity;</span><br><span class="line">                    x = acceleration.x;</span><br><span class="line">                    y = acceleration.y;</span><br><span class="line">                    if (self.state.clickStatus) &#123;</span><br><span class="line">                        if (Math.abs(x - lastX) &gt; speed || Math.abs(y - lastY) &gt; speed) &#123;</span><br><span class="line">                            // 用户设备摇动了，触发响应操作</span><br><span class="line">                            // 此处的判断依据是用户设备的加速度大于我们设置的阈值</span><br><span class="line">                                alert(&quot;摇动了手机&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;//如果已经生成了结果就不需要再重新生成了</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    lastX = x;</span><br><span class="line">                    lastY = y;</span><br><span class="line">                &#125;, false);</span><br><span class="line">            &#125; else if (permissionState == &quot;denied&quot;) &#123;</span><br><span class="line">                alert(&quot;拒绝喽&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).catch((error) =&gt; &#123;</span><br><span class="line">            // console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 处理常规的非iOS 13+设备</span><br><span class="line">        // console.log(&quot;处理常规的非iOS 13+设备&quot;);</span><br><span class="line">        if (window.DeviceMotionEvent) &#123;</span><br><span class="line">            alert(&quot;可以进行摇一摇&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // console.log(&apos;不支持window.DeviceMotionEvent&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>效果图：<br><img src="/2020/11/12/ios手机不兼容摇一摇功能/allow.jpg" alt=""></p></blockquote><p>PS：点击允许即可使用摇一摇功能。如果拒绝，需要在关掉这个进程再次进入页面才会再次询问。否则一直用不了摇一摇功能哦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;过年后回来的时候做了一个摇一摇的H5小游戏。因为我使用的是安卓手机，一直没有发现在苹果手机上不能使用。&lt;br&gt;刚开是以为是http和https的问题，但是在ios上即使使用https开头的链接然后还是不能摇~&lt;/p&gt;
&lt;p&gt;后来网上找了原因说是ios13+的版本，浏览器对设
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>inline-block间隙</title>
    <link href="https://Lifuzhen.github.io/2020/07/09/inline-block%E9%97%B4%E9%9A%99/"/>
    <id>https://Lifuzhen.github.io/2020/07/09/inline-block间隙/</id>
    <published>2020-07-09T11:12:04.000Z</published>
    <updated>2022-05-24T10:35:59.839Z</updated>
    
    <content type="html"><![CDATA[<p>我针对一些元素使用inline-block要比float频繁。img标签本身就是inline-block属性，所以页面中使用到img标签的时候经常会出现间隙问题。<br>最近写的h5页面多了，遇到这个问题的次数就越来越多了。<br>最典型的就是图片，当我两个图片要连接时，中间就出现了缝隙。审查元素我并没有设置间距。然后就找问题的原因，发现是典型的换行符/空格间隙问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;!--适应移动端--&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;!--css样式--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">ul&#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: #108ee9;</span><br><span class="line">    color: #ffffff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;llll&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;ffff&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;zzzz&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;7777&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;1111&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;9999&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/inline-block间隙/01.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我针对一些元素使用inline-block要比float频繁。img标签本身就是inline-block属性，所以页面中使用到img标签的时候经常会出现间隙问题。&lt;br&gt;最近写的h5页面多了，遇到这个问题的次数就越来越多了。&lt;br&gt;最典型的就是图片，当我两个图片要连接时，中
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>es6中的扩展运算符</title>
    <link href="https://Lifuzhen.github.io/2020/07/06/es6%E4%B8%AD%E7%9A%84%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://Lifuzhen.github.io/2020/07/06/es6中的扩展运算符/</id>
    <published>2020-07-06T11:00:00.000Z</published>
    <updated>2022-05-24T10:35:59.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象中的扩展运算符-…-用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中"><a href="#对象中的扩展运算符-…-用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中" class="headerlink" title="对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中"></a>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</h3><p>1.使用方法一：在函数的传参数过程。作用将剩余的参数放入一个数组中。合并<br>rest参数形式为（…变量名），其值为一个数组，用于获取函数多余参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f(a,...arr)&#123;</span><br><span class="line">    console.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">f(1,2,3,4,4); //[2,3,4,5]复制代码</span><br><span class="line">rest参数只能放在最后一个，否则报错：</span><br><span class="line">function f(a, ...b, c)&#123;...&#125;; // 报错</span><br></pre></td></tr></table></figure></p><p><img src="/2020/07/06/es6中的扩展运算符/error.jpg" alt=""></p><p>2.使用方法二：数组中的拓展运算  拆解<br>拓展运算符使用(…)，类似rest参数的逆运算，将数组转为用(,)分隔的参数序列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> console.log(...[1, 2, 3]);   // 1 2 3 </span><br><span class="line">console.log(1, ...[2,3], 4); // 1 2 3 4</span><br></pre></td></tr></table></figure></p><p>拓展运算符主要使用在函数调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function f (a, b)&#123;</span><br><span class="line">       console.log(a, b);</span><br><span class="line">   &#125;</span><br><span class="line">   f(...[1, 2]); // 1 2</span><br><span class="line">    </span><br><span class="line">   function g (a, b, c, d, e)&#123;</span><br><span class="line">       console.log(a, b, c, d, e);</span><br><span class="line">   &#125;</span><br><span class="line">   g(0, ...[1, 2], 3, ...[4]); // 0 1 2 3 4复制代码</span><br></pre></td></tr></table></figure></p><p>若拓展运算符后面是个空数组，则不产生效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...[], 1]; // [1]</span><br></pre></td></tr></table></figure></p><p>替代apply方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// ES6之前</span><br><span class="line">function f(a, b, c)&#123;...&#125;;</span><br><span class="line">var a = [1, 2, 3];</span><br><span class="line">f.apply(null, a);</span><br><span class="line"> </span><br><span class="line">// ES6之后</span><br><span class="line">function f(a, b, c)&#123;...&#125;;</span><br><span class="line">let a = [1, 2, 3];</span><br><span class="line">f(...a);</span><br><span class="line"> </span><br><span class="line">// ES6之前</span><br><span class="line">Math.max.apply(null, [3,2,6]);</span><br><span class="line"> </span><br><span class="line">// ES6之后</span><br><span class="line">Math.max(...[3,2,6]);</span><br></pre></td></tr></table></figure></p><p>拓展运算符的运用<br>(1)复制数组：<br>通常我们直接复制数组时，只是浅拷贝，如果要实现深拷贝，可以使用拓展运算符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 通常情况 浅拷贝</span><br><span class="line">let a1 = [1, 2];</span><br><span class="line">let a2 = a1; </span><br><span class="line">a2[0] = 3;</span><br><span class="line">console.log(a1,a2); // [3,2] [3,2]</span><br><span class="line"> </span><br><span class="line">// 拓展运算符 深拷贝</span><br><span class="line">let a1 = [1, 2];</span><br><span class="line">let a2 = [...a1];</span><br><span class="line">// let [...a2] = a1; // 作用相同</span><br><span class="line">a2[0] = 3;</span><br><span class="line">console.log(a1,a2); // [1,2] [3,2]</span><br></pre></td></tr></table></figure></p><p>(2)合并数组：  注意，这里合并数组，只是浅拷贝。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let a1 = [1,2];</span><br><span class="line">let a2 = [3];</span><br><span class="line">let a3 = [4,5];</span><br><span class="line"> </span><br><span class="line">// ES5 </span><br><span class="line">let a4 = a1.concat(a2, a3);</span><br><span class="line"> </span><br><span class="line">// ES6</span><br><span class="line">let a5 = [...a1, ...a2, ...a3];</span><br><span class="line"> </span><br><span class="line">a4[0] === a1[0]; // true</span><br><span class="line">a5[0] === a1[0]; // true</span><br></pre></td></tr></table></figure></p><p>(3)与解构赋值结合：<br>与解构赋值结合生成数组，但是使用拓展运算符需要放到参数最后一个，否则报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let [a, ...b] = [1, 2, 3, 4]; </span><br><span class="line">// a =&gt; 1  b =&gt; [2,3,4]</span><br><span class="line"> </span><br><span class="line">let [a, ...b] = [];</span><br><span class="line">// a =&gt; undefined b =&gt; []</span><br><span class="line"> </span><br><span class="line">let [a, ...b] = [&quot;abc&quot;];</span><br><span class="line">// a =&gt; &quot;abc&quot;  b =&gt; []</span><br></pre></td></tr></table></figure></p><p>扩展运算符可以将字符串转为真正的数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...&apos;hello&apos;]   // [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span><br></pre></td></tr></table></figure></p><p>将数据结构转为数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// arguments对象</span><br><span class="line">function foo() &#123;</span><br><span class="line">  const args = [...arguments];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用于替换es5中的Array.prototype.slice.call(arguments)写法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;对象中的扩展运算符-…-用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中&quot;&gt;&lt;a href=&quot;#对象中的扩展运算符-…-用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中&quot; class=&quot;headerlink&quot; title=&quot;对象中的扩展运算符(…)用于
      
    
    </summary>
    
    
      <category term="es6" scheme="https://Lifuzhen.github.io/tags/es6/"/>
    
      <category term="扩展运算符" scheme="https://Lifuzhen.github.io/tags/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>css实现小企鹅</title>
    <link href="https://Lifuzhen.github.io/2020/01/14/css%E5%AE%9E%E7%8E%B0%E5%B0%8F%E4%BC%81%E9%B9%85/"/>
    <id>https://Lifuzhen.github.io/2020/01/14/css实现小企鹅/</id>
    <published>2020-01-14T08:10:55.000Z</published>
    <updated>2022-05-24T10:35:59.948Z</updated>
    
    <content type="html"><![CDATA[<p>html代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>css代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .penguin &#123;</span><br><span class="line">    </span><br><span class="line">    /* change code below */</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: white;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">    /* change code above */</span><br><span class="line">    </span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: -5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 35%;</span><br><span class="line">    height: 35%;</span><br><span class="line">    border-radius: 50%;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  body &#123;</span><br><span class="line">    background:#c6faf1;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>效果图<br><img src="/2020/01/14/css实现小企鹅/penguin.jpg" alt=""></p><p>带有动画效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    --penguin-size: 300px;</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: white;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @media (max-width: 350px) &#123;</span><br><span class="line">    :root &#123;</span><br><span class="line">      </span><br><span class="line">      /* add code below */</span><br><span class="line">      --penguin-skin: black;</span><br><span class="line">      --penguin-size: 200px;</span><br><span class="line">      /* add code above */</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .penguin &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: var(--penguin-size, 300px);</span><br><span class="line">    height: var(--penguin-size, 300px);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 5%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, black);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(130deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">    animation-duration: 3s;</span><br><span class="line">    animation-name: wave;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">    transform-origin:0% 0%;</span><br><span class="line">    animation-timing-function: linear;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @keyframes wave &#123;</span><br><span class="line">      10% &#123;</span><br><span class="line">        transform: rotate(110deg);</span><br><span class="line">      &#125;</span><br><span class="line">      20% &#123;</span><br><span class="line">        transform: rotate(130deg);</span><br><span class="line">      &#125;</span><br><span class="line">      30% &#123;</span><br><span class="line">        transform: rotate(110deg);</span><br><span class="line">      &#125; </span><br><span class="line">      40% &#123;</span><br><span class="line">        transform: rotate(130deg);</span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left:-23%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 150%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  body &#123;</span><br><span class="line">    background:#c6faf1;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;html代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://Lifuzhen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://Lifuzhen.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>background-attchment移动端无效</title>
    <link href="https://Lifuzhen.github.io/2020/01/09/background-attchment%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%97%A0%E6%95%88/"/>
    <id>https://Lifuzhen.github.io/2020/01/09/background-attchment移动端无效/</id>
    <published>2020-01-09T04:22:58.000Z</published>
    <updated>2022-05-24T10:35:59.974Z</updated>
    
    <content type="html"><![CDATA[<p>想要实现一个移动端的页面，元素滚动，但是页面背景图不能滚动<br>能想到的就是使用“background-attachment: fixed”<br>但是在pc端是可以的，在移动端不适用</p><p>看了网上的很多列子<br>找到了一个使用body的方法，但是在ios中还是会跟随屏幕的滚动而滚动<br>所以就调整成下面，就适应了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//background-attachment固定背景图片手机端有效果只能放在body中</span><br><span class="line">body&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 10;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">body:before&#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: -1;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  background-image: url(&quot;../../../assets/bg.jpg&quot;);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment: fixed;</span><br><span class="line">  background-size: 100%, cover, cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想要实现一个移动端的页面，元素滚动，但是页面背景图不能滚动&lt;br&gt;能想到的就是使用“background-attachment: fixed”&lt;br&gt;但是在pc端是可以的，在移动端不适用&lt;/p&gt;
&lt;p&gt;看了网上的很多列子&lt;br&gt;找到了一个使用body的方法，但是在ios中还
      
    
    </summary>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://Lifuzhen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://Lifuzhen.github.io/tags/css/"/>
    
      <category term="背景图" scheme="https://Lifuzhen.github.io/tags/%E8%83%8C%E6%99%AF%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>在IOS中DeviceMotionEvent失效</title>
    <link href="https://Lifuzhen.github.io/2019/12/11/%E5%9C%A8IOS%E4%B8%ADDeviceMotionEvent%E5%A4%B1%E6%95%88/"/>
    <id>https://Lifuzhen.github.io/2019/12/11/在IOS中DeviceMotionEvent失效/</id>
    <published>2019-12-11T07:39:30.000Z</published>
    <updated>2022-05-24T10:36:00.758Z</updated>
    
    <content type="html"><![CDATA[<p>客户提出要摇一摇自动播放视频的功能<br>在做摇一摇的时候出现了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//摇一摇(使用DeviceMotion事件)</span><br><span class="line">shake() &#123;</span><br><span class="line">    var speed = 15;    // 用来判定的加速度阈值，太大了则很难触发</span><br><span class="line">    var x, y, z, lastX, lastY, lastZ;</span><br><span class="line">    x = y = z = lastX = lastY = lastZ = 0;</span><br><span class="line">    window.addEventListener(&apos;devicemotion&apos;, function (event) &#123;</span><br><span class="line">        var acceleration = event.accelerationIncludingGravity;</span><br><span class="line">        x = acceleration.x;</span><br><span class="line">        y = acceleration.y;</span><br><span class="line">        if (Math.abs(x - lastX) &gt; speed || Math.abs(y - lastY) &gt; speed) &#123;</span><br><span class="line">            // 用户设备摇动了，触发响应操作</span><br><span class="line">            // 此处的判断依据是用户设备的加速度大于我们设置的阈值</span><br><span class="line">             alert(&apos;摇了&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        lastX = x;</span><br><span class="line">        lastY = y;</span><br><span class="line">    &#125;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这段代码在安卓手机上运行没有一点问题，但是ios上怎么都不出来效果（真的愁死）<br>后来在输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(window.EdviceMotionEvent)</span><br></pre></td></tr></table></figure></p><p>发现ios上是有这个事件的，但就是没有弹出“摇了”这个弹出框</p><p>后来发现ios新系统版本摇一摇事件需要https协议（真的是被搞死）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">问题：window.DeviceMotionEvent 在ios中是有定义的，但就是不触发 devicemotion 事件；</span><br><span class="line">解决：使用 https 协议！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;客户提出要摇一摇自动播放视频的功能&lt;br&gt;在做摇一摇的时候出现了问题：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="devicemotion" scheme="https://Lifuzhen.github.io/tags/devicemotion/"/>
    
      <category term="ios" scheme="https://Lifuzhen.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>position为fixed时设置z-index失效</title>
    <link href="https://Lifuzhen.github.io/2019/11/26/position%E4%B8%BAfixed%E6%97%B6%E8%AE%BE%E7%BD%AEz-index%E5%A4%B1%E6%95%88/"/>
    <id>https://Lifuzhen.github.io/2019/11/26/position为fixed时设置z-index失效/</id>
    <published>2019-11-26T10:22:52.000Z</published>
    <updated>2022-05-24T10:36:01.106Z</updated>
    
    <content type="html"><![CDATA[<p>今天在改bug的时候遇到了个z-index的问题，怎么都调试不好，然后就上网百度<br>bug: 一个div元素下两个子元素，其中一个子元素fixed定位，另一个没有办法执行click方法</p><p>原来谷歌浏览器在设置position:fixed;后会触发元素创建一个新的层叠上下文，并且当成一个整体在父层叠上下文中进行比较。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>如上面的dom结构，当给b设置了position:fixed;属性后，会触发创建一个新的层叠上下文，它的父层叠上下文变成了a，所以b只能在a的内部进行层叠比较。这也就是大家熟听的“从父原则”。</p><p>所以本来所有元素都在root内比较，改为fixed之后只能在父级元素内比较，而父级元素没有设置z-index，所以无法比较。</p><p>所以解决方案是给父级元素设置z-index，一般设置为0就可以了。</p><p>tips：</p><ol><li>z-index只有在设置了position为relative,absolute,fixed时才会有效。 </li><li>z-index的“从父原则”。当你发现把z-index设的多大都没用时，看看其父元素是否设置了有效的z-index，当然别忘了先看看自身是否设置了position。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在改bug的时候遇到了个z-index的问题，怎么都调试不好，然后就上网百度&lt;br&gt;bug: 一个div元素下两个子元素，其中一个子元素fixed定位，另一个没有办法执行click方法&lt;/p&gt;
&lt;p&gt;原来谷歌浏览器在设置position:fixed;后会触发元素创建一个
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Lifuzhen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://Lifuzhen.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>2019月度总结-九月</title>
    <link href="https://Lifuzhen.github.io/2019/10/05/2019%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93-%E4%B9%9D%E6%9C%88/"/>
    <id>https://Lifuzhen.github.io/2019/10/05/2019月度总结-九月/</id>
    <published>2019-10-05T01:30:30.000Z</published>
    <updated>2022-05-24T10:36:01.296Z</updated>
    
    <content type="html"><![CDATA[<p>九月好像是我最懒的一个月，感觉什么都没干，我准备把月度总结换成线下写了。可是现在人在苏州，我的本子却在上海。所以这个月的还是在网上写吧！</p><p>真不知道写点什么。。。</p><h1 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h1><p>九月份跟朋友一起看了 —— 哪吒之魔童降世 —— 这部电影，我们去的夜场。这个电影真的超燃，非常好看。我以为九月二十六号从电影院下线后能在电脑上看呢，一直到现在都没有看到，好想在电脑上多看几遍</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>上个月还说八月份的学习量少呢，九月才真的是少。我这是要一个月不如一个月了吗</p><p>从早上写了个标题，到现在都没有想起来我有什么可以写的，九月份真的是混过去的~</p><h1 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h1><p>真的是我这个人英语都不好好学习了。。。<br>下面是我的两个软件在9月30号那天的签到截图，我也真的是醉了<br><img src="/2019/10/05/2019月度总结-九月/01.jpg" alt=""><br><img src="/2019/10/05/2019月度总结-九月/02.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;九月好像是我最懒的一个月，感觉什么都没干，我准备把月度总结换成线下写了。可是现在人在苏州，我的本子却在上海。所以这个月的还是在网上写吧！&lt;/p&gt;
&lt;p&gt;真不知道写点什么。。。&lt;/p&gt;
&lt;h1 id=&quot;电影&quot;&gt;&lt;a href=&quot;#电影&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="2019月度总结" scheme="https://Lifuzhen.github.io/categories/2019%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="2019月度总结" scheme="https://Lifuzhen.github.io/tags/2019%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>判断是页面是在手机端还是PC端打开</title>
    <link href="https://Lifuzhen.github.io/2019/09/27/%E5%88%A4%E6%96%AD%E6%98%AF%E9%A1%B5%E9%9D%A2%E6%98%AF%E5%9C%A8%E6%89%8B%E6%9C%BA%E7%AB%AF%E8%BF%98%E6%98%AFPC%E7%AB%AF%E6%89%93%E5%BC%80/"/>
    <id>https://Lifuzhen.github.io/2019/09/27/判断是页面是在手机端还是PC端打开/</id>
    <published>2019-09-27T10:10:02.000Z</published>
    <updated>2022-05-24T10:36:00.842Z</updated>
    
    <content type="html"><![CDATA[<p>之前碰到过在pc端的微信打开一个页面，告诉我只能在手机端的微信内置浏览器中打开。</p><p>效果如下所示：</p><p><img src="/2019/09/27/判断是页面是在手机端还是PC端打开/01.png" alt=""></p><p>navigator.userAgent : 浏览器用于 HTTP 请求的用户代理头的值，通过UserAgent可以取得浏览器类别、版本，客户端操作系统等信息。</p><p>本地输出一下，如下显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(navigator.userAgent);</span><br><span class="line">//Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Mobile Safari/537.36</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;判断是页面是在手机端还是PC端打开&lt;/title&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;link href=&quot;https://cdn.bootcss.com/weui/2.1.2/style/weui.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            const sUserAgent = navigator.userAgent.toLowerCase();</span><br><span class="line">            const pad = sUserAgent.match(/ipad/i) == &quot;ipad&quot;;//是否是ipad设备</span><br><span class="line">            const iphone = sUserAgent.match(/iphone os/i) == &quot;iphone os&quot;;//是否是iphone设备</span><br><span class="line">            const android = sUserAgent.match(/android/i) == &quot;android&quot;;//是否是安卓设备</span><br><span class="line">            const ce = sUserAgent.match(/windows ce/i) == &quot;windows ce&quot;;</span><br><span class="line">            const wm = sUserAgent.match(/windows mobile/i) == &quot;windows mobile&quot;;</span><br><span class="line">            const wcBrowser = sUserAgent.match(/MicroMessenger/i)==&quot;micromessenger&quot;;//判断当前是否是微信环境</span><br><span class="line">            </span><br><span class="line">            if (pad || iphone || android || ce || wm) &#123;</span><br><span class="line">                console.log(&quot;手机端&quot;);</span><br><span class="line">                if(wcBrowser)&#123;</span><br><span class="line">                    console.log(&quot;手机端微信内置浏览器&quot;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    console.log(&quot;手机端但不是微信内置浏览器&quot;)</span><br><span class="line">                    document.body.innerHTML = &apos;&lt;div class=&quot;weui_msg&quot;&gt;&lt;div class=&quot;weui_icon_area&quot;&gt;&lt;i class=&quot;weui_icon_info weui_icon_msg&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;weui_text_area&quot;&gt;&lt;h4 class=&quot;weui_msg_title&quot;&gt;请在微信内置浏览器打开链接&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&quot;&quot;)</span><br><span class="line">                document.body.innerHTML = &apos;&lt;div class=&quot;weui_msg&quot;&gt;&lt;div class=&quot;weui_icon_area&quot;&gt;&lt;i class=&quot;weui_icon_info weui_icon_msg&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;weui_text_area&quot;&gt;&lt;h4 class=&quot;weui_msg_title&quot;&gt;请在移动端微信打开链接&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/27/判断是页面是在手机端还是PC端打开/04.png" alt=""><br><img src="/2019/09/27/判断是页面是在手机端还是PC端打开/04.jpg" alt=""></p><p>最终的显示效果（限制用户只能在移动端的微信内置浏览器中打开）：</p><p><img src="/2019/09/27/判断是页面是在手机端还是PC端打开/02.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前碰到过在pc端的微信打开一个页面，告诉我只能在手机端的微信内置浏览器中打开。&lt;/p&gt;
&lt;p&gt;效果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/27/判断是页面是在手机端还是PC端打开/01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;navigator.u
      
    
    </summary>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://Lifuzhen.github.io/tags/js/"/>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>react-canvas-nest</title>
    <link href="https://Lifuzhen.github.io/2019/09/26/react-canvas-nest/"/>
    <id>https://Lifuzhen.github.io/2019/09/26/react-canvas-nest/</id>
    <published>2019-09-25T22:58:12.000Z</published>
    <updated>2023-03-16T07:46:11.994Z</updated>
    
    <content type="html"><![CDATA[<p>之前在人家网站上看到，我都能玩半个小时。<br>今天刚好看到了这个插件：react-canvas-nest,用来写写</p><p><a href="https://lifuzhen.github.io/create-react-app-antd-less/build/#/nest">演示效果</a></p><p>在react环境下使用的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line"></span><br><span class="line">npm install react-canvas-nest</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用代码：</span><br><span class="line"></span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactCanvasNest from &quot;react-canvas-nest&quot;; //引入</span><br><span class="line"></span><br><span class="line">class Home extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;ReactCanvasNest</span><br><span class="line">             className=&apos;canvasNest&apos;</span><br><span class="line">              config=&#123;&#123;</span><br><span class="line">                    pointColor: &apos;173, 188, 213 &apos;,</span><br><span class="line">                    lineColor: &apos;185, 198,219&apos;,</span><br><span class="line">                    lineWidth: 2,</span><br><span class="line">                    count: 120,</span><br><span class="line">                    pointR: 1.5</span><br><span class="line">                &#125;&#125;</span><br><span class="line">              style=&#123;&#123;zIndex: 1&#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Home;</span><br></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="/2019/09/26/react-canvas-nest/Animation.gif" alt=""></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>config<br><img src="/2019/09/26/react-canvas-nest/config.png" alt="config"></p><p>style<br>Support style attribute, default style as follows:<br><img src="/2019/09/26/react-canvas-nest/style.jpg" alt="style"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在人家网站上看到，我都能玩半个小时。&lt;br&gt;今天刚好看到了这个插件：react-canvas-nest,用来写写&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lifuzhen.github.io/create-react-app-antd-less/build/#/
      
    
    </summary>
    
    
      <category term="前端" scheme="https://Lifuzhen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://Lifuzhen.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>微信扫码登录自定义样式</title>
    <link href="https://Lifuzhen.github.io/2019/09/24/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F/"/>
    <id>https://Lifuzhen.github.io/2019/09/24/微信扫码登录自定义样式/</id>
    <published>2019-09-24T01:31:12.000Z</published>
    <updated>2023-03-16T07:46:11.989Z</updated>
    
    <content type="html"><![CDATA[<p>微信扫码登录现在几乎是每个网站必备的登录方式.<br><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">网站应用微信登录开发指南</a></p><p>官方文档中介绍了两种登录方式：1、url跳转；2、内嵌</p><h1 id="url跳转"><a href="#url跳转" class="headerlink" title="url跳转"></a>url跳转</h1><p>url跳转至一个新页面，效果如下：</p><p><img src="/2019/09/24/微信扫码登录自定义样式/url.jpg" alt=""></p><h1 id="内嵌"><a href="#内嵌" class="headerlink" title="内嵌"></a>内嵌</h1><p>页面内嵌代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;内嵌-微信登陆&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;http://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;login_container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var obj = new WxLogin(&#123;</span><br><span class="line">        self_redirect:false,</span><br><span class="line">        id:&quot;login_container&quot;,</span><br><span class="line">        appid: &quot;wxbdc5610cc59c1631&quot;,</span><br><span class="line">        scope: &quot;snsapi_login&quot;,</span><br><span class="line">        redirect_uri: &quot;https%3A%2F%2Fpassport.yhd.com%2Fwechat%2Fcallback.do&quot;,</span><br><span class="line">        state: Math.ceil(Math.random()*1000),</span><br><span class="line">        style: &quot;black&quot;,</span><br><span class="line">        href: &quot;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>官方参数说明：<br><img src="/2019/09/24/微信扫码登录自定义样式/canshu.png" alt=""></p><p>内嵌效果如下：</p><p><img src="/2019/09/24/微信扫码登录自定义样式/0.jpg" alt=""></p><h1 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h1><h2 id="href链接写好的css样式（必须是https），http不会响应"><a href="#href链接写好的css样式（必须是https），http不会响应" class="headerlink" title="href链接写好的css样式（必须是https），http不会响应"></a>href链接写好的css样式（必须是https），http不会响应</h2><h3 id="内嵌-1"><a href="#内嵌-1" class="headerlink" title="内嵌"></a>内嵌</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = new WxLogin(&#123;</span><br><span class="line">        self_redirect:false,</span><br><span class="line">        id:&quot;login_container&quot;,</span><br><span class="line">        appid: &quot;wxbdc5610cc59c1631&quot;,</span><br><span class="line">        scope: &quot;snsapi_login&quot;,</span><br><span class="line">        redirect_uri: &quot;https%3A%2F%2Fpassport.yhd.com%2Fwechat%2Fcallback.do&quot;,</span><br><span class="line">        state: Math.ceil(Math.random()*1000),</span><br><span class="line">        style: &quot;black&quot;,</span><br><span class="line">        href: &quot;https://lifuzhen.github.io/create-react-app-antd-less/src/assets/wechatLogin.min.css&quot;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>wechatLogin.min.css:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@charset &quot;utf-8&quot;;.impowerBox .qrcode&#123;width:180px;border:0;margin-top:13px&#125;.impowerBox .title&#123;display:none&#125;.impowerBox .info&#123;width:160px&#125;.status_icon&#123;display:none&#125;.impowerBox .status&#123;text-align:center&#125;.wrp_code&#123;width:206px;background-color:#fff;border:1px solid #e5e5e5;height:206px;margin:0 auto;border-radius:4px&#125;.panelContent .info&#123;display:none&#125;</span><br></pre></td></tr></table></figure></p><h3 id="url跳转的链接（可直接打开）"><a href="#url跳转的链接（可直接打开）" class="headerlink" title="url跳转的链接（可直接打开）"></a>url跳转的链接（可直接打开）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/qrconnect?appid=wxbdc5610cc59c1631&amp;redirect_uri=https%3A%2F%2Fpassport.yhd.com%2Fwechat%2Fcallback.do&amp;response_type=code&amp;scope=snsapi_login&amp;href=https://lifuzhen.github.io/create-react-app-antd-less/src/assets/wechatLogin.min.css&amp;state=b3dbfa5773c25b9e942465253b5af6ee#wechat_redirect</span><br></pre></td></tr></table></figure><p>将微信的title和info都隐藏掉了，也改变了二维码的大小。效果如下：</p><p><img src="/2019/09/24/微信扫码登录自定义样式/href0.png" alt=""></p><h2 id="也可以转换成base64"><a href="#也可以转换成base64" class="headerlink" title="也可以转换成base64"></a>也可以转换成base64</h2><h3 id="内嵌-2"><a href="#内嵌-2" class="headerlink" title="内嵌"></a>内嵌</h3><p>转换css：</p><p><img src="/2019/09/24/微信扫码登录自定义样式/base64.jpg" alt=""></p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = new WxLogin(&#123;</span><br><span class="line">        self_redirect:false,</span><br><span class="line">        id:&quot;login_container&quot;,</span><br><span class="line">        appid: &quot;wxbdc5610cc59c1631&quot;,</span><br><span class="line">        scope: &quot;snsapi_login&quot;,</span><br><span class="line">        redirect_uri: &quot;https%3A%2F%2Fpassport.yhd.com%2Fwechat%2Fcallback.do&quot;,</span><br><span class="line">        href:&apos;data:text/css;base64,QGNoYXJzZXQgInV0Zi04IjsuaW1wb3dlckJveCAucXJjb2Rle3dpZHRoOjE4MHB4O2JvcmRlcjowO21hcmdpbi10b3A6MTNweH0uaW1wb3dlckJveCAudGl0bGV7ZGlzcGxheTpub25lfS5pbXBvd2VyQm94IC5pbmZve3dpZHRoOjE2MHB4fS5zdGF0dXNfaWNvbntkaXNwbGF5Om5vbmV9LmltcG93ZXJCb3ggLnN0YXR1c3t0ZXh0LWFsaWduOmNlbnRlcn0ud3JwX2NvZGV7d2lkdGg6MjA2cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2U1ZTVlNTtoZWlnaHQ6MjA2cHg7bWFyZ2luOjAgYXV0bztib3JkZXItcmFkaXVzOjRweH0ucGFuZWxDb250ZW50IC5pbmZve2Rpc3BsYXk6bm9uZX0=&apos;,</span><br><span class="line">        state: Math.ceil(Math.random()*1000),</span><br><span class="line">        style: &quot;black&quot;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="url跳转的链接（可直接打开）-1"><a href="#url跳转的链接（可直接打开）-1" class="headerlink" title="url跳转的链接（可直接打开）"></a>url跳转的链接（可直接打开）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/qrconnect?appid=wxbdc5610cc59c1631&amp;redirect_uri=https%3A%2F%2Fpassport.yhd.com%2Fwechat%2Fcallback.do&amp;response_type=code&amp;scope=snsapi_login&amp;href=data:text/css;base64,QGNoYXJzZXQgInV0Zi04IjsuaW1wb3dlckJveCAucXJjb2Rle3dpZHRoOjE4MHB4O2JvcmRlcjowO21hcmdpbi10b3A6MTNweH0uaW1wb3dlckJveCAudGl0bGV7ZGlzcGxheTpub25lfS5pbXBvd2VyQm94IC5pbmZve3dpZHRoOjE2MHB4fS5zdGF0dXNfaWNvbntkaXNwbGF5Om5vbmV9LmltcG93ZXJCb3ggLnN0YXR1c3t0ZXh0LWFsaWduOmNlbnRlcn0ud3JwX2NvZGV7d2lkdGg6MjA2cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2U1ZTVlNTtoZWlnaHQ6MjA2cHg7bWFyZ2luOjAgYXV0bztib3JkZXItcmFkaXVzOjRweH0ucGFuZWxDb250ZW50IC5pbmZve2Rpc3BsYXk6bm9uZX0=&amp;state=b3dbfa5773c25b9e942465253b5af6ee#wechat_redirect</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/09/24/微信扫码登录自定义样式/href0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信扫码登录现在几乎是每个网站必备的登录方式.&lt;br&gt;&lt;a href=&quot;https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;amp;t=resource/res_list&amp;amp;verify=1&amp;
      
    
    </summary>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://Lifuzhen.github.io/tags/js/"/>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://Lifuzhen.github.io/tags/css/"/>
    
      <category term="微信" scheme="https://Lifuzhen.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于this.setState({})中的数据延迟问题</title>
    <link href="https://Lifuzhen.github.io/2019/09/22/%E5%85%B3%E4%BA%8Ethis-setState-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://Lifuzhen.github.io/2019/09/22/关于this-setState-中的数据延迟问题/</id>
    <published>2019-09-22T03:54:53.000Z</published>
    <updated>2022-05-24T10:36:00.910Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://segmentfault.com/a/1190000019670168" target="_blank" rel="noopener">ERIC</a></p><p>this.setState( )方法是React.js中最常见的一种方法，利用它可以控制各种状态变化，达到页面各种交互效果，但是，我们在React开发中偶尔会发现，明明已经通过this.setState( )方法处理过某个state的值，但是在后续的方法里，log打印出来仍然是之前的值，或者，第一次获取到原来的值，第二次才能获取到设置之后的新值，让人误以为是因为电脑或浏览器性能问题造成的”延迟”问题。</p><h1 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h1><hr><p>为了理解这个问题，我们首先来看一下setState这个过程中发生了什么：</p><p>1、将setState传入的partialState参数存储在当前组件实例的state暂存队列中。<br>2、判断当前React是否处于批量更新状态，如果是，将当前组件加入待更新的组件队列中。<br>3、如果未处于批量更新状态，将批量更新状态标识设置为true，用事务再次调用前一步方法，保证当前组件加入到了待更新组件队列中。<br>4、调用事务的waper方法，遍历待更新组件队列依次执行更新。<br>5、执行生命周期componentWillReceiveProps。<br>6、将组件的state暂存队列中的state进行合并，获得最终要更新的state对象，并将队列置为空。<br>7、执行生命周期componentShouldUpdate，根据返回值判断是否要继续更新。<br>8、执行生命周期componentWillUpdate。<br>9、执行真正的更新，render重新渲染。<br>10、执行生命周期componentDidUpdate。</p><h1 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h1><hr><p>首先思考为什么会出现这种情况，在facebook给出的官方文档中我们可以看到这么一段话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setState(updater[, callback])</span><br></pre></td></tr></table></figure><p><em>Think of setState( ) as a request rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. React does not guarantee that the state changes are applied immediately.</em></p><p><em>setState( ) does not always immediately update the component. It may batch or defer the update until later. This makes reading this.state right after calling setState( ) a potential pitfall. Instead, use componentDidUpdate or a setState callback (setState(updater, callback)), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the updater argument below.</em></p><p>总结一下，就是以下几点：</p><ul><li>setState( ) 更类似于是一种请求而不是立即更新组件的命令</li><li>为了更好的性能，React会延迟调用它，不会保证state的变更会立即生效，而是会批量推迟更新</li><li>官方承认会存在隐患</li><li>建议在componentDidUpdate中执行或利用回调函数（setState(updater, callback)）</li></ul><p>举个简单例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    num: 1</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount = () =&gt; &#123;</span><br><span class="line">  this.setState(&#123; num: this.state.num + 1 &#125;);</span><br><span class="line">  console.log(this.state.num);   // 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为this.setState( )本身是异步的，程序异步运行，可以提高程序运行的效率，不必等一个程序跑完，再跑下一个程序，特别当这两个程序是无关的时候。React会去合并所有的state变化，在前一个方法未执行完时，就先开始运行后一个方法。但是实际操作中，为了能实时获取后一个状态值，需要一些解决的办法。</p><h1 id="利用全局属性"><a href="#利用全局属性" class="headerlink" title="利用全局属性"></a>利用全局属性</h1><hr><p>尝试一下换个写法，利用全局属性的办法而不是用state的方式去获取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.num = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount = () =&gt; &#123;</span><br><span class="line">  this.num = this.num + 1;</span><br><span class="line">  console.log(this.num);   // 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其实是一种取巧的方式，写法方便，原理简单，但是并不十分推荐，因为它并不符合React中关于有状态组件的设计理念，存在有可能无法触发刷新的风险(虽然在我的开发过程从没有发生这样的事)，所以还是希望大家优先使用下面的方法。</p><h1 id="利用回调函数"><a href="#利用回调函数" class="headerlink" title="利用回调函数"></a>利用回调函数</h1><hr><p>回调函数众所周知，就是某个函数执行完毕后执行的函数，利用它可以确保在this.setState( )整个函数执行完成之后去获取this.state.xxx的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    num: 1</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount = () =&gt; &#123;</span><br><span class="line">  this.setState(&#123; num: this.state.num + 1 &#125;, () =&gt; &#123;</span><br><span class="line">    console.log(this.state.num);   // 2</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(this.state.num);   // 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制台按顺序先后打印出两个结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><h1 id="利用setTimeout"><a href="#利用setTimeout" class="headerlink" title="利用setTimeout( )"></a>利用setTimeout( )</h1><hr><p>首先简单回顾一下，利用setTimeout( )模拟一下前文提到的Javascript中的异步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">foo = () =&gt; &#123;</span><br><span class="line">  console.log(&apos;11111111&apos;);</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">    console.log(&apos;22222222&apos;);</span><br><span class="line">  &#125;,1000);</span><br><span class="line">&#125;;</span><br><span class="line">bar = () =&gt; &#123;</span><br><span class="line">  console.log(&apos;33333333&apos;);  </span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">bar();</span><br><span class="line">// 11111111</span><br><span class="line">// 33333333</span><br><span class="line">// 22222222</span><br></pre></td></tr></table></figure></p><p>所以，在上述代码块中，在前一方法（foo）执行时，后一方法（bar）也可以执行。符合异步的基本概念，程序并不按顺序执行。在foo函数中执行到setTimeout的时候，函数会跳出，并先执行bar( )方法，这样就模拟了一个异步的效果。这里顺便再提一下前面说的，setState方法通过一个队列机制实现state更新，当执行setState的时候，会将需要更新的state合并之后放入状态队列，而不会立即更新，通过下面的例子可见。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    num: 1,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">componentWillMount = () =&gt; &#123;</span><br><span class="line">  this.setState(&#123;</span><br><span class="line">    num: this.state.num + 1,</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(this.state.num);</span><br><span class="line">  this.setState(&#123;</span><br><span class="line">    num: this.state.num + 1,</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(this.state.num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  console.log(this.state.num);</span><br><span class="line">  return (&lt;div /&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码输出结果为： ==1，1，2==</p><p>利用setTimeout方法可以解决state的异步问题，因为setState只在合成事件和钩子函数中是“异步”的，在原生事件和setTimeout 中都是同步的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount = () =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      num: this.state.num + 1,</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(this.state.num);  // 1</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      num: this.state.num + 1,</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(this.state.num);  // 2</span><br><span class="line">  &#125;, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="利用componentDidUpdate"><a href="#利用componentDidUpdate" class="headerlink" title="利用componentDidUpdate( )"></a>利用componentDidUpdate( )</h1><hr><p>根据前面文档所说，在componentDidUpdate( )方法中去获取新的state值，根据React的生命周期，此时this.state已经更新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      num: 1</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillMount = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; num: this.state.num + 1 &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidUpdate = () =&gt; &#123;</span><br><span class="line">    console.log(this.state.num);   // 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><hr><p>⚠️注意，很多新人在遇到这种问题时无所适从，可能会用一些投机取巧的方式，上面的全局对象是一种方式，还有一种就是绕过setState直接赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.state.num = 2   // 2</span><br></pre></td></tr></table></figure></p><p>理论上讲，这种方法当然也能达到赋值目的，但将state设计成更新延缓到最后批量合并再去渲染，对于应用的性能优化是有极大好处的，如果每次的状态改变都去重新渲染真实dom，那么它将带来巨大的性能消耗，所以不建议上面写法。</p><p>⚠️如果在shouldComponentUpdate或者componentWillUpdate方法中调用setState，此时this._pending-StateQueue != null，就会造成循环调用，使得浏览器内存占满后崩溃。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载自&lt;a href=&quot;https://segmentfault.com/a/1190000019670168&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ERIC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this.setState( )方法是React.js中最常见的一
      
    
    </summary>
    
    
      <category term="react" scheme="https://Lifuzhen.github.io/tags/react/"/>
    
  </entry>
  
</feed>
