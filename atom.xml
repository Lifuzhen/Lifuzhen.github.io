<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charli</title>
  <icon>https://www.gravatar.com/avatar/a9f20b334b612fb41766f27517bdfacb</icon>
  <subtitle>梦想的起源</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Lifuzhen.github.io/"/>
  <updated>2023-07-28T13:32:34.039Z</updated>
  <id>https://Lifuzhen.github.io/</id>
  
  <author>
    <name>Charli</name>
    <email>1342786307@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13-罗马数字转整数</title>
    <link href="https://Lifuzhen.github.io/2023/07/28/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <id>https://Lifuzhen.github.io/2023/07/28/13-罗马数字转整数/</id>
    <published>2023-07-28T13:23:45.000Z</published>
    <updated>2023-07-28T13:32:34.039Z</updated>
    
    <content type="html"><![CDATA[<p>罗马数字包含以下七种字符:I，V，X，L，C，D和M。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure></p><p>例如， 罗马数字 2 写做II，即为两个并列的 1 。12 写做XII，即为X+II。 27 写做XXVII, 即为XX+V+II。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做IIII，而是IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为IX。这个特殊的规则只适用于以下六种情况：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I可以放在V(<span class="number">5</span>) 和X(<span class="number">10</span>) 的左边，来表示 <span class="number">4</span> 和 <span class="number">9</span>。</span><br><span class="line">X可以放在L(<span class="number">50</span>) 和C(<span class="number">100</span>) 的左边，来表示 <span class="number">40</span> 和<span class="number">90</span>。</span><br><span class="line">C可以放在D(<span class="number">500</span>) 和M(<span class="number">1000</span>) 的左边，来表示<span class="number">400</span> 和<span class="number">900</span>。</span><br><span class="line">给定一个罗马数字，将其转换成整数。</span><br></pre></td></tr></table></figure></p><p>示例1:<br>输入:s = “III”<br>输出: 3</p><p>示例2:<br>输入:s = “IV”<br>输出: 4</p><p>示例3:<br>输入:s = “IX”<br>输出: 9</p><p>示例4:<br>输入: s = “LVIII”<br>输出: 58<br>解释: L = 50, V= 5, III = 3.</p><p>示例 5:<br>输入: s = “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p><p>提示：<br>1 &lt;= s.length &lt;= 15<br>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)<br>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内<br>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。<br>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。<br>关于罗马数字的详尽书写规则，可以参考 罗马数字 - Mathematics 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/roman-to-integer" target="_blank" rel="noopener">https://leetcode.cn/problems/roman-to-integer</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h5 id="我是创建了一个对象存储的，-但是执行速度没有那么快。-new-Map的执行速度确实快-速度很明显不一样"><a href="#我是创建了一个对象存储的，-但是执行速度没有那么快。-new-Map的执行速度确实快-速度很明显不一样" class="headerlink" title="我是创建了一个对象存储的， 但是执行速度没有那么快。 new Map的执行速度确实快. 速度很明显不一样"></a>我是创建了一个对象存储的， 但是执行速度没有那么快。 new Map的执行速度确实快. 速度很明显不一样</h5><p><img src="/2023/07/28/13-罗马数字转整数/img.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> listMap = &#123;</span><br><span class="line">        <span class="string">'I'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'V'</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">'X'</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">'L'</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">'C'</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">'D'</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="string">'M'</span>: <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"s[i]:"</span>, s[i])</span><br><span class="line">        <span class="keyword">let</span> level = listMap[s[i]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(level &lt; listMap[s[i+<span class="number">1</span>]] &amp;&amp; i &lt; s.length<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"result:"</span>, result);</span><br><span class="line">            result -= level;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result += level;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="官方解题思路"><a href="#官方解题思路" class="headerlink" title="官方解题思路"></a>官方解题思路</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> symbolValues = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    symbolValues.set(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">    symbolValues.set(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">    symbolValues.set(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">    symbolValues.set(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">    symbolValues.set(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">    symbolValues.set(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">    symbolValues.set(<span class="string">'M'</span>, <span class="number">1000</span>);  </span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> n = s.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = symbolValues.get(s[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; value &lt; symbolValues.get(s[i + <span class="number">1</span>])) &#123;</span><br><span class="line">            ans -= value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;罗马数字包含以下七种字符:I，V，X，L，C，D和M。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>12-整数转罗马数字</title>
    <link href="https://Lifuzhen.github.io/2023/07/13/12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
    <id>https://Lifuzhen.github.io/2023/07/13/12-整数转罗马数字/</id>
    <published>2023-07-13T12:39:25.000Z</published>
    <updated>2023-07-13T12:46:43.407Z</updated>
    
    <content type="html"><![CDATA[<p>罗马数字包含以下七种字符：I，V，X，L，C，D和M。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure></p><p>例如， 罗马数字 2 写做II，即为两个并列的 1。 12 写做XII，即为X+II。 27 写做XXVII, 即为XX+V+II。 </p><p>通常情况下，罗马数字中小的数字在大的数字的右边。 但也存在特例，例如 4 不写做IIII，而是IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。<br>同样地，数字 9 表示为IX。 这个特殊的规则只适用于以下六种情况：  </p><ul><li>I 可以放在V(5) 和X(10) 的左边，来表示 4 和 9。 </li><li>X 可以放在L(50) 和C(100) 的左边，来表示 40 和90。</li><li>C 可以放在D(500) 和M(1000) 的左边，来表示400 和900。<br>给你一个整数，将其转为罗马数字。 </li></ul><p>示例1:<br>输入:num = 3 输出: “III” </p><p>示例2:<br>输入:num = 4 输出: “IV” </p><p>示例3:<br>输入:num = 9 输出: “IX” </p><p>示例4:<br>输入:num = 58 输出: “LVIII”<br>解释: L = 50, V = 5, III = 3. </p><p>示例5:<br>输入:num = 1994 输出: “MCMXCIV”<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.<br>提示：  1 &lt;= num &lt;= 3999  </p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/integer-to-roman" target="_blank" rel="noopener">https://leetcode.cn/problems/integer-to-roman</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intToRoman = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = [[<span class="number">1000</span>, <span class="string">'M'</span>],[<span class="number">900</span>, <span class="string">'CM'</span>],[<span class="number">500</span>, <span class="string">'D'</span>],[<span class="number">400</span>, <span class="string">'CD'</span>],[<span class="number">100</span>, <span class="string">'C'</span>],[<span class="number">90</span>, <span class="string">'XC'</span>],[<span class="number">50</span>, <span class="string">'L'</span>],[<span class="number">40</span>, <span class="string">'XL'</span>],[<span class="number">10</span>, <span class="string">'X'</span>],[<span class="number">9</span>, <span class="string">'IX'</span>],[<span class="number">5</span>, <span class="string">'V'</span>],[<span class="number">4</span>, <span class="string">'IV'</span>],[<span class="number">1</span>, <span class="string">'I'</span>]];</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [value, symbol] <span class="keyword">of</span> arr )&#123;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= value)&#123;</span><br><span class="line">            num-=value;</span><br><span class="line">            result.push(symbol)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;罗马数字包含以下七种字符：I，V，X，L，C，D和M。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>ios手机显示new Date()解析的日期是NaN</title>
    <link href="https://Lifuzhen.github.io/2023/07/11/ios%E6%89%8B%E6%9C%BA%E6%98%BE%E7%A4%BAnew%20Date()%E8%A7%A3%E6%9E%90%E7%9A%84%E6%97%A5%E6%9C%9F%E6%98%AFNaN/"/>
    <id>https://Lifuzhen.github.io/2023/07/11/ios手机显示new Date()解析的日期是NaN/</id>
    <published>2023-07-11T13:23:00.000Z</published>
    <updated>2023-07-11T13:30:06.765Z</updated>
    
    <content type="html"><![CDATA[<p>开发活动过程中用到了倒计时，测试过程都是正常的，结果活动上线后有人使用iphone13 mini访问发现抢购模块的倒计时显示有问题,显示了NaN </p><p><img src="/2023/07/11/ios手机显示new Date()解析的日期是NaN/ios手机显示new-Date-解析的日期是NaN/img.png" alt=""></p><p>后来排查后发现是手机兼容性问题</p><p>ios系统不支持2023-07-30这样格式的时间导致出现的这个问题,ios识别2023/07/30这样的格式</p><p>那就拿代码开刀<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2023-07-30 12:00:00'</span>).getTime()</span><br><span class="line"><span class="comment">//后</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2023-07-30 12:00:00'</span>.replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>)).getTime()</span><br></pre></td></tr></table></figure></p><p>结果这样就可以了， 果然兼容性最难搞</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发活动过程中用到了倒计时，测试过程都是正常的，结果活动上线后有人使用iphone13 mini访问发现抢购模块的倒计时显示有问题,显示了NaN &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/07/11/ios手机显示new Date()解析的日期是NaN/ios手机显示
      
    
    </summary>
    
      <category term="技术，h5" scheme="https://Lifuzhen.github.io/categories/%E6%8A%80%E6%9C%AF%EF%BC%8Ch5/"/>
    
    
      <category term="问题" scheme="https://Lifuzhen.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>报错[BABEL] Note: The code generator has</title>
    <link href="https://Lifuzhen.github.io/2023/05/25/%E6%8A%A5%E9%94%99%5BBABEL%5D%20Note:%20The%20code%20generator%20has/"/>
    <id>https://Lifuzhen.github.io/2023/05/25/报错[BABEL] Note: The code generator has/</id>
    <published>2023-05-25T02:40:10.000Z</published>
    <updated>2023-05-25T02:46:50.055Z</updated>
    
    <content type="html"><![CDATA[<p>– [BABEL] Note: The code generator has deoptimised the styling of <strong><strong>*</strong></strong>.development.js as it exceeds the max of 500KB.<br>字面意思是：babel警告，代码生成器已经将这块js去除了styling, 因为他超过了500KB.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel-loader'</span>&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– [BABEL] Note: The code generator has deoptimised the styling of &lt;strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/strong&gt;.development.js as it exceeds the ma
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10-正则表达式匹配</title>
    <link href="https://Lifuzhen.github.io/2023/04/21/10-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>https://Lifuzhen.github.io/2023/04/21/10-正则表达式匹配/</id>
    <published>2023-04-21T10:01:17.000Z</published>
    <updated>2023-04-21T10:06:23.298Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘<em>‘ 的正则表达式匹配。<br>‘.’ 匹配任意单个字符<br>‘</em>‘ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p><p>示例 1：<br>输入：s = “aa”, p = “a”<br>输出：false<br>解释：”a” 无法匹配 “aa” 整个字符串。</p><p>示例 2:<br>输入：s = “aa”, p = “a<em>“<br>输出：true<br>解释：因为 ‘</em>‘ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。</p><p>示例 3：<br>输入：s = “ab”, p = “.<em>“<br>输出：true<br>解释：”.</em>“ 表示可匹配零个或多个（’*’）任意字符（’.’）。</p><p>提示：<br>1 &lt;= s.length &lt;= 20<br>1 &lt;= p.length &lt;= 20<br>s 只包含从 a-z 的小写字母。<br>p 只包含从 a-z 的小写字母，以及字符 . 和 <em>。<br>保证每次出现字符 </em> 时，前面都匹配到有效的字符</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/regular-expression-matching" target="_blank" rel="noopener">https://leetcode.cn/problems/regular-expression-matching</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment">* @param &#123;string&#125; p</span></span><br><span class="line"><span class="comment">* @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">const</span> isMatch = <span class="function">(<span class="params">s, p</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || p == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> sLen = s.length, pLen = p.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(sLen + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">        dp[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(pLen + <span class="number">1</span>).fill(<span class="literal">false</span>); <span class="comment">// 将项默认为false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; pLen + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">"*"</span>) dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 迭代</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; sLen + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; pLen + <span class="number">1</span>; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">"."</span>) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">"*"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">"."</span>) &#123;</span><br><span class="line">              dp[i][j] = dp[i][j - <span class="number">2</span>] || dp[i - <span class="number">1</span>][j - <span class="number">2</span>] || dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[sLen][pLen]; <span class="comment">// 长sLen的s串 是否匹配 长pLen的p串</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>// 作者：xiao_ben_zhu<br>// 链接：<a href="https://leetcode.cn/problems/regular-expression-matching/solution/shou-hui-tu-jie-wo-tai-nan-liao-by-hyj8/" target="_blank" rel="noopener">https://leetcode.cn/problems/regular-expression-matching/solution/shou-hui-tu-jie-wo-tai-nan-liao-by-hyj8/</a><br>// 来源：力扣（LeetCode）<br>// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘&lt;em&gt;‘ 的正则表达式匹配。&lt;br&gt;‘.’ 匹配任意单个字符&lt;br&gt;‘&lt;/em&gt;‘ 匹配零个或多个前面的那一个元素&lt;br&gt;所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。&lt;/p&gt;
&lt;p&gt;示
      
    
    </summary>
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>JSON.stringify()转换后包含值为undefined数据丢失的问题</title>
    <link href="https://Lifuzhen.github.io/2023/03/31/JSON.stringify()%E8%BD%AC%E6%8D%A2%E5%90%8E%E5%8C%85%E5%90%AB%E5%80%BC%E4%B8%BAundefined%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://Lifuzhen.github.io/2023/03/31/JSON.stringify()转换后包含值为undefined数据丢失的问题/</id>
    <published>2023-03-31T11:30:26.000Z</published>
    <updated>2023-03-31T11:35:00.951Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发的时候碰到个问题，使用JSON.stringify()转换数据时，如果对象里面的值是undefined，这个值会丢失，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="string">"12"</span>, <span class="attr">c</span>: <span class="string">""</span>, <span class="attr">d</span>: <span class="number">234</span>, <span class="attr">e</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj));<span class="comment">//'&#123;"a":1,"b":"12","c":"","d":234&#125;'</span></span><br></pre></td></tr></table></figure><p>上面正常的一个对象在使用JSON.stringify转换的时候，e丢了。</p><h4 id="JSON-stringify-的实现可以分为以下几个步骤："><a href="#JSON-stringify-的实现可以分为以下几个步骤：" class="headerlink" title="JSON.stringify()的实现可以分为以下几个步骤："></a>JSON.stringify()的实现可以分为以下几个步骤：</h4><p>1、判断输入参数是否是一个对象类型。如果不是对象类型，则直接返回这个值。<br>2、创建一个数组，用于存储对象的属性名和对应的值。<br>3、遍历对象的属性，将属性名和对应的值添加到数组中。<br>4、根据选项参数控制输出结果的格式。<br>5、将数组转换为JSON格式的字符串并返回。</p><p>并不是所有的数据类型的转换JSON都是支持的，因此部分不支持的就会被忽略掉，比如undefined</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近开发的时候碰到个问题，使用JSON.stringify()转换数据时，如果对象里面的值是undefined，这个值会丢失，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>9-回文数</title>
    <link href="https://Lifuzhen.github.io/2023/03/23/9-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>https://Lifuzhen.github.io/2023/03/23/9-回文数/</id>
    <published>2023-03-23T13:49:16.000Z</published>
    <updated>2023-03-23T03:51:09.302Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>例如，121 是回文，而 123 不是。</p><p>示例 1：</p><blockquote><p>输入：x = 121<br>输出：true</p></blockquote><p>示例2：</p><blockquote><p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p></blockquote><p>示例 3：</p><blockquote><p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。</p></blockquote><p>提示：<br>-2^31&lt;= x &lt;= 2^31- 1</p><p>进阶：你能不将整数转为字符串来解决这个问题吗？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1、转换成字符串解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number&#125; x</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var isPalindrome = function(x) &#123;</span><br><span class="line">    const reverseValue = String(x).split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class="line">    console.log(&quot;reverseValue:&quot;, reverseValue);</span><br><span class="line">    if(String(x) === reverseValue)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//简化版本</span><br><span class="line">var isPalindrome = function(x) &#123;</span><br><span class="line">    return (x+&quot;&quot;).split(&quot;&quot;).reverse().join(&quot;&quot;) == x+&quot;&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、不用字符串解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var isPalindrome = function(x) &#123;</span><br><span class="line">//负数，0，10 的倍数，都不可能是回文数</span><br><span class="line">    if(x &lt; 0 || (!(x % 10) &amp;&amp; x)) return false;</span><br><span class="line">    //利用整数反转来获取反转后的数，若和参数完全一致，则是回文数。</span><br><span class="line">    let x2 = x, res = 0;</span><br><span class="line">    while(x2)&#123;</span><br><span class="line">        res = res * 10 + x2 % 10;</span><br><span class="line">        x2 = ~~(x2 / 10);</span><br><span class="line">    &#125;</span><br><span class="line">    return res === x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//优化（只判断到一半就可以确定是否是回文了）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false。&lt;/p&gt;
&lt;p&gt;回文数是指正序（从左向右）和倒序（从
      
    
    </summary>
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>ios短信验证码自动填充两次</title>
    <link href="https://Lifuzhen.github.io/2023/03/22/ios%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B8%A4%E6%AC%A1/"/>
    <id>https://Lifuzhen.github.io/2023/03/22/ios短信验证码自动填充两次/</id>
    <published>2023-03-22T14:35:43.000Z</published>
    <updated>2023-03-22T06:40:50.011Z</updated>
    
    <content type="html"><![CDATA[<p>ios系统内部的bug<br>某些app或者微信网页里，复制手机收到的短信验证码，会触发UITextFieldTextDidChangeNotification监听事件，导致验证码出现了两次，这个应该是ios系统内部的bug.</p><p>解决方案</p><blockquote><p>如果input框的type=“text” 或者 type=“password”，则可以给input框加上maxLength属性，让最大长度等于验证码的位数。<br>如果input框的type=“number”，则可以用如下方法解决：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Input maxLength=&#123;<span class="number">6</span>&#125; placeholder=<span class="string">"请填写验证码"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"number"</span> oninput=<span class="string">"if(value.length&gt;6) value = value.slice(0,6)"</span>&gt;</span><br></pre></td></tr></table></figure><p>type=‘text’ 或者 type=’password’时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Field</span><br><span class="line">    v-model=&quot;checkcode&quot;</span><br><span class="line">    center</span><br><span class="line">    placeholder=&quot;请输入验证码&quot;</span><br><span class="line">    @keyup.native=&quot;checkcodeInput&quot;</span><br><span class="line">    maxlength=&quot;6&quot;</span><br><span class="line">  &gt;</span><br><span class="line">&lt;/Field&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ios系统内部的bug&lt;br&gt;某些app或者微信网页里，复制手机收到的短信验证码，会触发UITextFieldTextDidChangeNotification监听事件，导致验证码出现了两次，这个应该是ios系统内部的bug.&lt;/p&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;blockq
      
    
    </summary>
    
      <category term="技术" scheme="https://Lifuzhen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="问题" scheme="https://Lifuzhen.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>8-字符串转换整数（atoi）</title>
    <link href="https://Lifuzhen.github.io/2023/03/17/8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%EF%BC%88atoi%EF%BC%89/"/>
    <id>https://Lifuzhen.github.io/2023/03/17/8-字符串转换整数（atoi）/</id>
    <published>2023-03-17T13:53:01.000Z</published>
    <updated>2023-03-17T07:57:49.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你来实现一个myAtoi(string s)函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p><p>函数myAtoi(string s) 的算法如下：</p><p>读入字符串并丢弃无用的前导空格<br>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>如果整数数超过 32 位有符号整数范围 [−2^31, 2^31− 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −2^31 的整数应该被固定为 −2^31 ，大于 2^31− 1 的整数应该被固定为 2^31− 1 。<br>返回整数作为最终结果。</p><p>注意：<br>本题中的空白字符只包括空格字符 ‘ ‘ 。<br>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</p><h3 id="使用parseInt解决"><a href="#使用parseInt解决" class="headerlink" title="使用parseInt解决"></a>使用parseInt解决</h3><p>(投机取巧了)，没有按照人家官方说的那种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var myAtoi = function(s) &#123;</span><br><span class="line">let num = parseInt(s, 10);</span><br><span class="line">if(isNaN(num))&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125; else if(num &lt; Math.pow(-2, 31) || num &gt; (Math.pow(2, 31)-1))&#123;</span><br><span class="line">return num &lt; Math.pow(-2, 31) ? Math.pow(-2, 31) : (Math.pow(2, 31)-1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h3><ul><li>自动机<br>我们的程序在每个时刻有一个状态s，每次从序列中输入一个字符c，并根据字符c 转移到下一个状态s’。这样，我们只需要建立一个覆盖所有情况的从s与c映射到s’的表格即可解决题目中的问题。</li></ul><h4 id="状态分析"><a href="#状态分析" class="headerlink" title="状态分析"></a>状态分析</h4><p>首先，从题意中，我们很轻易地可以知道，字符串str中的每个字符，都有可能是以下的四种类型中的一种：</p><ul><li>空格字符’ ‘（Space）</li><li>正负号+和-(Sign)</li><li>字符串型的数值（Number）</li><li>除以上三种情况外的任何情况（Other）</li></ul><h4 id="阶段分析"><a href="#阶段分析" class="headerlink" title="阶段分析"></a>阶段分析</h4><p>如果想要将字符串转换为整数，那么必然会经历这四个有序的阶段：</p><p>1、开始转换（start）<br>2、判断正负（signed）<br>3、生成数值（in_number）<br>4、结束转换（end）</p><h4 id="生成自动机"><a href="#生成自动机" class="headerlink" title="生成自动机"></a>生成自动机</h4><p>这步是最为关键的一步，它将状态和阶段巧妙地结合了起来。</p><p>话不多说，让我们先来看一个表格：</p><table><thead><tr><th></th><th>‘’（Space）</th><th>+/-（Sign）</th><th>Number</th><th>Other</th></tr></thead><tbody><tr><td>start</td><td>start</td><td>signed</td><td>in_number</td><td>end</td></tr><tr><td>signed</td><td>end</td><td>end</td><td>in_number</td><td>end</td></tr><tr><td>in_number</td><td>end</td><td>end</td><td>in_number</td><td>end</td></tr><tr><td>end</td><td>end</td><td>end</td><td>end</td></tr></tbody></table><p>现在来说明下这个表格的含义。</p><p>不同的行象征不同执行阶段：</p><ul><li>第0行：开始转换阶段</li><li>第1行：判断正负阶段</li><li>第2行：生成数值阶段</li><li>第3行：结束转换阶段</li></ul><p>不同的列象征不同的字符类型：</p><ul><li>第0列：字符为空格</li><li>第1列：字符为正、负号</li><li>第2列：字符为字符型数值</li><li>第3列：字符为其他形式<br>由行、列确定的坐标，象征着下一个字符所处的执行阶段。</li></ul><p>例如，官方的str例子：” -42”,就会进行如下的转换流程（请结合表格认真阅读，这对你理解“自动机”的概念很有帮助）：</p><ol><li>一开始，必然是开始阶段，所以从第0行，即[0, ?]</li><li>第一个字符是空格，找到空格所在的列，即[?, 0]</li><li>结合行、列，即[0, 0],发现将为下一个字符执行start阶段</li><li>所以第二个字符还是从第0行开始，即[0, ?]</li><li>第二个字符是空格，空格的列数是[?, 0]</li><li>所以第三个字符的还是执行start阶段（[0, 0]）</li><li>…（空格的分析不再赘述）</li><li>发现字符是负号-,而此时是在第0行（之前空格的原因），所以坐标是[0, 1]，</li><li>那么可以下一个字符的执行阶段是signed，即第1列（[1, ?]）</li><li>接下来的字符是字符型的4，则列数是[?, 2]</li><li>所以坐标确定为[1, 2]，则下一个字符的执行阶段是in_number,即[2, ?]</li><li>这次的字符还是字符型（2），则依旧定位到[?, 2]，则下一个字符执行in_number阶段</li><li>没有字符了，遍历结束</li><li>依据负号和数值,得出转换结果为-42</li></ol><p>现在你理解了如何由状态和阶段构建自动机了吧？<br>以上的这些步骤描述，其实就是LeetCode官方图例所表达的意思。<br><img src="/2023/03/17/8-字符串转换整数（atoi）/img.png" alt=""></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>话不多说，看代码吧~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; str</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var myAtoi = function(str) &#123;</span><br><span class="line">  // 自动机类</span><br><span class="line">  class Automaton&#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">      // 执行阶段，默认处于开始执行阶段</span><br><span class="line">      this.state = &apos;start&apos;;</span><br><span class="line">      // 正负符号，默认是正数</span><br><span class="line">      this.sign = 1;</span><br><span class="line">      // 数值，默认是0</span><br><span class="line">      this.answer = 0;</span><br><span class="line">      /*</span><br><span class="line">      关键点：</span><br><span class="line">      状态和执行阶段的对应表</span><br><span class="line">      含义如下：</span><br><span class="line">      [执行阶段, [空格, 正负, 数值, 其他]]</span><br><span class="line">      */</span><br><span class="line">      this.map = new Map([</span><br><span class="line">        [&apos;start&apos;, [&apos;start&apos;, &apos;signed&apos;, &apos;in_number&apos;, &apos;end&apos;]],</span><br><span class="line">        [&apos;signed&apos;, [&apos;end&apos;, &apos;end&apos;, &apos;in_number&apos;, &apos;end&apos;]],</span><br><span class="line">        [&apos;in_number&apos;, [&apos;end&apos;, &apos;end&apos;, &apos;in_number&apos;, &apos;end&apos;]],</span><br><span class="line">        [&apos;end&apos;, [&apos;end&apos;, &apos;end&apos;, &apos;end&apos;, &apos;end&apos;]]</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取状态的索引</span><br><span class="line">    getIndex(char) &#123;</span><br><span class="line">      if (char === &apos; &apos;) &#123;</span><br><span class="line">        // 空格判断</span><br><span class="line">        return 0;</span><br><span class="line">      &#125; else if (char === &apos;-&apos; || char === &apos;+&apos;) &#123;</span><br><span class="line">        // 正负判断</span><br><span class="line">        return 1;</span><br><span class="line">      &#125; else if (typeof Number(char) === &apos;number&apos; &amp;&amp; !isNaN(char)) &#123;</span><br><span class="line">        // 数值判断</span><br><span class="line">        return 2;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 其他情况</span><br><span class="line">        return 3;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    关键点：</span><br><span class="line">    字符转换执行函数</span><br><span class="line">    */</span><br><span class="line">    get(char) &#123;</span><br><span class="line">      /*</span><br><span class="line">      易错点：</span><br><span class="line">      每次传入字符时，都要变更自动机的执行阶段</span><br><span class="line">      */</span><br><span class="line">      this.state = this.map.get(this.state)[this.getIndex(char)];</span><br><span class="line"></span><br><span class="line">      if(this.state === &apos;in_number&apos;) &#123;</span><br><span class="line">        /*</span><br><span class="line">        小技巧：</span><br><span class="line">        在JS中，对字符串类型进行减法操作，可以将得到一个数值型（Number）的值</span><br><span class="line"></span><br><span class="line">        易错点：</span><br><span class="line">        本处需要利用括号来提高四则运算的优先级</span><br><span class="line">        */</span><br><span class="line">        this.answer = this.answer * 10 + (char - 0);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        易错点：</span><br><span class="line">        在进行负数比较时，需要将INT_MIN变为正数</span><br><span class="line">        */</span><br><span class="line">        this.answer = this.sign === 1 ? Math.min(this.answer, Math.pow(2, 31) - 1) : Math.min(this.answer, -Math.pow(-2, 31));</span><br><span class="line">      &#125; else if (this.state === &apos;signed&apos;) &#123;</span><br><span class="line">        /*</span><br><span class="line">        优化点：</span><br><span class="line">        对于一个整数来说，非正即负，</span><br><span class="line">        所以正负号的判断，只需要一次。</span><br><span class="line">        故，可以降低其判断的优先级</span><br><span class="line">        */</span><br><span class="line">        this.sign = char === &apos;+&apos; ? 1 : -1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 生成自动机实例</span><br><span class="line">  let automaton = new Automaton();</span><br><span class="line"></span><br><span class="line">  // 遍历每个字符</span><br><span class="line">  for(let char of str) &#123;</span><br><span class="line">    // 依次进行转换</span><br><span class="line">    automaton.get(char);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 返回值，整数 = 正负 * 数值</span><br><span class="line">  return automaton.sign * automaton.answer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请你来实现一个myAtoi(string s)函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
      
    
    </summary>
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://Lifuzhen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>setFieldsValue的key是个变量</title>
    <link href="https://Lifuzhen.github.io/2023/03/16/setFieldsValue%E7%9A%84key%E6%98%AF%E4%B8%AA%E5%8F%98%E9%87%8F/"/>
    <id>https://Lifuzhen.github.io/2023/03/16/setFieldsValue的key是个变量/</id>
    <published>2023-03-16T14:01:03.000Z</published>
    <updated>2023-03-16T14:03:40.491Z</updated>
    
    <content type="html"><![CDATA[<p>使用antD的form表单开发，给formItem中的元素设置值，或者是提交后把值置为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setFieldsValue设置一组输入控件的值，如果设置的key是个变量时要用【】包裹</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用antD的form表单开发，给formItem中的元素设置值，或者是提交后把值置为空。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>deepClone深拷贝</title>
    <link href="https://Lifuzhen.github.io/2023/03/15/deepClone%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>https://Lifuzhen.github.io/2023/03/15/deepClone深拷贝/</id>
    <published>2023-03-15T14:00:24.000Z</published>
    <updated>2023-03-16T06:35:16.645Z</updated>
    
    <content type="html"><![CDATA[<p>//空间换时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default function memo(func, hasher)&#123;</span><br><span class="line">const cache = &#123;&#125;;</span><br><span class="line">return function(...args)&#123;</span><br><span class="line">let key = &quot;&quot;+(hasher ? hasher(...args) : args[0])</span><br><span class="line">if(!cache[key])&#123;</span><br><span class="line">cache[key] = function(...args);</span><br><span class="line">&#125;</span><br><span class="line">return cache[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON.parse(JSON.stringfy())<br>实现深拷贝—缺陷：不能拷贝Symbol、函数、循环引用。</p><p>深拷贝——简介版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function deepClone = obj =&gt; &#123;</span><br><span class="line">if(typeof obj != &quot;object&quot; || obj === null)&#123;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line">let result;</span><br><span class="line">if(base instanceof Array)&#123;</span><br><span class="line">result = [];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">result = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">for(let item in base)&#123;</span><br><span class="line">if(base.hasOwnProperty(item))&#123;</span><br><span class="line">result[item] = deepClone(base[item])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝—— 可以解决循环引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export default deepClone = base =&gt;&#123;</span><br><span class="line">const baseStack=[];</span><br><span class="line">const targetStack = [];</span><br><span class="line">let _clone = base =&gt; &#123;</span><br><span class="line">if(typeof base != &quot;object&quot; || base === null)&#123;</span><br><span class="line">return base;</span><br><span class="line">&#125;</span><br><span class="line">let target = &#123;&#125;;</span><br><span class="line">if(Array.isArray(base))&#123;</span><br><span class="line">target = [];</span><br><span class="line">&#125;</span><br><span class="line">const index = baseStack.indexOf(base);</span><br><span class="line">if(index != -1)&#123;</span><br><span class="line">return targetStack[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baseStack.push(base);</span><br><span class="line">targetStack.push(target);</span><br><span class="line"></span><br><span class="line">for(let i in base)&#123;</span><br><span class="line">target[i] = _clone(base[i]);_</span><br><span class="line">&#125;</span><br><span class="line">return target;</span><br><span class="line">&#125;_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;//空间换时间&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git config中name和email问题</title>
    <link href="https://Lifuzhen.github.io/2023/02/17/git%20config%E4%B8%ADname%E5%92%8Cemail%E9%97%AE%E9%A2%98/"/>
    <id>https://Lifuzhen.github.io/2023/02/17/git config中name和email问题/</id>
    <published>2023-02-17T12:13:47.000Z</published>
    <updated>2023-03-17T06:18:01.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单个项目设置name和email"><a href="#单个项目设置name和email" class="headerlink" title="单个项目设置name和email"></a>单个项目设置name和email</h3><p>每个项目都有一个 .git 文件夹（这个文件夹默认可能不显示）， 该文件夹下有config文件，里面包含当前项目的user.name和user.email</p><p>git config user.name “”<br>git config user.email “”</p><p>进入.git文件夹后，cat config 就可以看到设置的名字和邮件了<br><img src="/2023/02/17/git config中name和email问题/git-config中name和email问题/git-config-01.png" alt=""></p><p><img src="/2023/02/17/git config中name和email问题/git-config中name和email问题/git-config-02.png" alt=""></p><h3 id="全局设置name和email"><a href="#全局设置name和email" class="headerlink" title="全局设置name和email"></a>全局设置name和email</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#设置name</span><br><span class="line">git config --global user.name &quot;XXXX&quot;</span><br><span class="line">#设置email</span><br><span class="line">git config --global user.email &quot;XXXX&quot;</span><br></pre></td></tr></table></figure><ul><li>–global参数，表示你这台机器上所有的git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和emial地址，参考上面的单个项目的name和email配置。</li><li><p>配置好后， 可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure></li><li><p>查看配置<br><img src="/2023/02/17/git config中name和email问题/git-config中name和email问题/git-config-03.jpeg" alt=""></p></li></ul><h3 id="ssh：operation-timed-out"><a href="#ssh：operation-timed-out" class="headerlink" title="ssh：operation timed out"></a>ssh：operation timed out</h3><p><img src="/2023/02/17/git config中name和email问题/git-config中name和email问题/ssh：operation%20timed%20out.png" alt=""></p><p>偶然间就突然报了上面的错误， 我没有改动什么呀～<br>最后知道原因了， 是因为公司的项目设置了ip的限制，不能使用ssh了。<br>这种情况只能添加ip，但是我移动一个地方就要改动一次ip，这种太复杂了。 我就先把ssh改为https吧</p><p>使用下面的语句更改</p><h4 id="ssh改为https"><a href="#ssh改为https" class="headerlink" title="ssh改为https"></a>ssh改为https</h4><p>git remote set-url origin <a href="http://gitlab.*************ui.git" target="_blank" rel="noopener">http://gitlab.*************ui.git</a></p><h4 id="https改为ssh"><a href="#https改为ssh" class="headerlink" title="https改为ssh"></a>https改为ssh</h4><p>git remote set-url origin git@gitlab.<strong><strong>*</strong></strong>-ui.git</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单个项目设置name和email&quot;&gt;&lt;a href=&quot;#单个项目设置name和email&quot; class=&quot;headerlink&quot; title=&quot;单个项目设置name和email&quot;&gt;&lt;/a&gt;单个项目设置name和email&lt;/h3&gt;&lt;p&gt;每个项目都有一个 .git 
      
    
    </summary>
    
      <category term="技术，git" scheme="https://Lifuzhen.github.io/categories/%E6%8A%80%E6%9C%AF%EF%BC%8Cgit/"/>
    
    
      <category term="问题" scheme="https://Lifuzhen.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>(一)两数之和</title>
    <link href="https://Lifuzhen.github.io/2021/11/15/(%E4%B8%80)%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://Lifuzhen.github.io/2021/11/15/(一)两数之和/</id>
    <published>2021-11-15T13:58:22.000Z</published>
    <updated>2023-02-17T06:11:31.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p>给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 <strong>和为目标值</strong>  <em>target</em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></p><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 104</li><li>-109 &lt;= nums[i] &lt;= 109</li><li>-109 &lt;= target &lt;= 109</li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p><hr><p>解题1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var twoSum = function(nums, target)&#123;</span><br><span class="line">    for(let i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">        let num2 = target - nums[i];</span><br><span class="line">        if(nums.includes(num2) &amp;&amp; nums.indexOf(num2) != i)&#123;</span><br><span class="line">            return [i, nums.indexOf(num2)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const twoSum = (nums, target) =&gt; &#123;</span><br><span class="line">  const prevNums = &#123;&#125;;                         // 存放出现过的数字，和对应的索引</span><br><span class="line">  for (let i = 0; i &lt; nums.length; i++) &#123;      // 遍历每一项</span><br><span class="line">    const curNum = nums[i];                    // 当前项</span><br><span class="line">    const targetNum = target - curNum;         // 希望从过去的数字中找到的呼应项</span><br><span class="line">    const targetNumIndex = prevNums[targetNum];// 在prevNums中找targetNum的索引</span><br><span class="line">    if (targetNumIndex !== undefined) &#123;        // 如果能找到</span><br><span class="line">      return [targetNumIndex, i];              // 直接返回targetNumIndex和当前的i</span><br><span class="line">    &#125;                                          // 如果找不到，说明之前没出现过targetNum</span><br><span class="line">    prevNums[curNum] = i;                      // 往prevNums存当前curNum和对应的i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;两数之和&quot;&gt;&lt;a href=&quot;#两数之和&quot; class=&quot;headerlink&quot; title=&quot;两数之和&quot;&gt;&lt;/a&gt;两数之和&lt;/h1&gt;&lt;p&gt;给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 &lt;strong&gt;和为目标值&lt;/strong&gt; 
      
    
    </summary>
    
      <category term="前端" scheme="https://Lifuzhen.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="力扣" scheme="https://Lifuzhen.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>alternate of undefined</title>
    <link href="https://Lifuzhen.github.io/2021/04/16/alternate%20of%20undefined/"/>
    <id>https://Lifuzhen.github.io/2021/04/16/alternate of undefined/</id>
    <published>2021-04-16T13:37:21.000Z</published>
    <updated>2022-05-24T10:35:59.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一天还可以好好运行的项目,第二天打开就报错了.<br>没有什么改动,真的是感觉代码有毒~<br>既然碰到了这个坑,那就先跳再说</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>项目使用的react版本为16.10.0<br>但是2021-03-22 react官方更新了17.0.2的版本，导致我的项目报了alternate of undefined，就很奇怪的问题，我就添加debugger一步一步的找问题<br><img src="/2021/04/16/alternate of undefined/bug.png" alt=""></p><p>左边是react16.8.6下运行的显示的有_reactInternalFiber这个属性，但是右边的就没有这个属性，react16的大版本都是用的Fiber，没有找到这个属性，所以后续就报错了<br><img src="/2021/04/16/alternate of undefined/01.png" alt=""><br><img src="/2021/04/16/alternate of undefined/02.jpg" alt=""></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>网上去找这个问题的解决方案,很多人说是版本的问题.<br>然后就更新版本，把react、react-dom和react-art 都统一更新到17.0.2的版本，这个问题就解决了。<br>看网上说最好是保证这三个使用的插件大版本是同一个</p><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>（PS：为什么react更新版本导致了这个项目的问题呢，没有检查到项目中是否有用到云版本~    待解决！！！）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前一天还可以好好运行的项目,第二天打开就报错了.&lt;br&gt;没有什么改动,真的是感觉代码有毒~&lt;br&gt;既然碰到了这个坑,那就先跳再说&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="react" scheme="https://Lifuzhen.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://Lifuzhen.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>git学习指南</title>
    <link href="https://Lifuzhen.github.io/2021/04/12/git%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <id>https://Lifuzhen.github.io/2021/04/12/git学习指南/</id>
    <published>2021-04-11T16:10:30.000Z</published>
    <updated>2022-05-24T10:35:59.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>那天心血来潮去上图看书了,拿了一本《git学习指南》，还挺厚的一本书，我就走马观花似的看了一遍，记录一下我的摘抄。</p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>–format、–oneline 格式化输出<br>–stat、–shortstat 统计信息修改<br>–grph  日志选项<br>–interactive  代码段选取</p><p>git diff 文件名   //查看被修改的行<br>git rm 文件名   //删除文件<br>git log       //显示历史<br>git clone –bare ***.git    //创建裸版本库</p><p>git log -n 3  //only the last three commits<br>git log –online //only one line per commit<br>git log –stat //only show statistics<br>git log –graph –online  //各提交之间的关系<br>git staus 中的文件可以使用   git reset HEAD(重置为当前的HEAD版本)  ***文件  移出暂存区 </p><p>git status –short<br>git stash<br>git stash pop<br>git stash list<br>git stash pop <strong>文件<br>git log –summary -m90% | grep -e “^rename” 百分比显示源文件和目标文件的相似度<br>git log –follow </strong>文件 //连续读取文件被重命名之后的历史记录<br>git blame -M -C -C -C <strong>文件 //确定文件来源<br>git branch //查看分支<br>git checkout -b </strong>分支   //创建并切换到新分支<br>git branch -d <strong>分支  //删除分支<br>git branch </strong>分支  **分支散列值    // 恢复某个分支<br>git reflog  // 列取散列值<br>git reset merge  //取消合并<br>git remote –verbose   //显示用于获取或推送提交的路径<br>git branch -r //跟踪分支<br>git pull –rebase</p><p>git tag  //创建标签<br>git show -ref –dereference –tags  //打印标签的散列值<br>git log –oneline –decorate  //将标签添加到日志输出中<br>git log -l  //显示所有标签<br>git log –walk-reflogs mybranch  //显示一个分支的本地历史记录<br>git diff<br>git diff –word-diff    //按单词显示所做的修改<br>git diff –word-diff=color    //使用不同的颜色显示文件中的不同<br>git config –global alias.ci commit   //commit的别名为ci<br>git config –global alias.st status  //设置status的别名为st<br>git rebase 变基</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;那天心血来潮去上图看书了,拿了一本《git学习指南》，还挺厚的一本书，我就走马观花似的看了一遍，记录一下我的摘抄。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在React Hooks中使用生命周期方法</title>
    <link href="https://Lifuzhen.github.io/2021/03/16/%E5%9C%A8React%20Hooks%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95/"/>
    <id>https://Lifuzhen.github.io/2021/03/16/在React Hooks中使用生命周期方法/</id>
    <published>2021-03-16T10:48:03.000Z</published>
    <updated>2022-05-24T10:35:59.483Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自于<a href="https://www.sollrei.me/post/frontend/2019-05-28" target="_blank" rel="noopener">Sollrei</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为项目上用到了hooks+ts，在使用定时任务的时候，退出当前组件时，仍然会执行定时任务，但是在hooks中没有componentWillUnMount方法，所以就网上查找资料。</p><h3 id="React新版本的生命周期"><a href="#React新版本的生命周期" class="headerlink" title="React新版本的生命周期"></a>React新版本的生命周期</h3><p><img src="/2021/03/16/在React Hooks中使用生命周期方法/01.jpg" alt=""></p><blockquote><p>react 16.3之后新增了两个生命周期getDerivedStateFromProps和getSnapshotBeforeUpdate，并且原来的componentWillMount，componentWillReceiveProps以及componentWillUpdate将被移除。</p></blockquote><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>函数组件不用写constructor，用useState初始化state</p><h3 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h3><blockquote><p>这个方法基本用来替代componentWillReceiveProps，它是个静态方法，也就是说不能访问this，也就是说不能改this.state</p></blockquote><p>官方栗子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView</span>(<span class="params">&#123;row&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [isScrollingDown, setIsScrollingDown] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">let</span> [prevRow, setPrevRow] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (row !== prevRow) &#123;</span><br><span class="line">    <span class="comment">// 上次渲染后row发生变化  更新isScrollingDown.</span></span><br><span class="line">    setIsScrollingDown(prevRow !== <span class="literal">null</span> &amp;&amp; row &gt; prevRow);</span><br><span class="line">    setPrevRow(row);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Scrolling down: <span class="subst">$&#123;isScrollingDown&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>使用React.memo，类似PureComponent，但它只对比props的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Demo = React.memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对子组件可以使用useMemo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">&#123; a, b &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 只在a变化时re-render</span></span><br><span class="line">  <span class="keyword">const</span> child1 = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;Child1 a=&#123;a&#125; /&gt;, [a]);</span><br><span class="line">  <span class="comment">// 只在b变化时re-render</span></span><br><span class="line">  <span class="keyword">const</span> child2 = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;Child2 b=&#123;b&#125; /&gt;, [b]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;child1&#125;</span><br><span class="line">      &#123;child2&#125;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>那就是函数它自个儿了……<br>下面几个可以使用useEffect(fn, […watchStates])实现的</p><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>第二个参数传空数组</p><blockquote><p>这么写在useEffect里使用一些state的时候会报错”missing dependency”，暂时用了eslint-disable-line</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = title;</span><br><span class="line">    <span class="comment">// do ...</span></span><br><span class="line">  &#125;, []); <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 点击文字是 hello world world .... 但是页面title是hello</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><p>只传一个参数，每次render就都会调用这个函数，和componentDidUpdate不同的是第一次render也会执行它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = title;</span><br><span class="line">    <span class="comment">// do ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>如果不希望在第一次（初始）render时候调用，可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line">  <span class="keyword">const</span> first = useRef(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  useLayoutEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (first.current) &#123;</span><br><span class="line">      first.current = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.title = title;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidUpdateFunction"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p>在useEffect的第一个函数参数中返回一个函数，这个函数就会在unmount时候被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'componentWillUnmount'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setTitle(title + <span class="string">' world'</span>)&#125;&gt;&#123;title&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>最后最后componentDidCatch和getDerivedStateFromError暂时还不能用Hook来实现，暂时。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文来自于&lt;a href=&quot;https://www.sollrei.me/post/frontend/2019-05-28&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sollrei&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; c
      
    
    </summary>
    
    
      <category term="react" scheme="https://Lifuzhen.github.io/tags/react/"/>
    
      <category term="hooks" scheme="https://Lifuzhen.github.io/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号h5跳转小程序</title>
    <link href="https://Lifuzhen.github.io/2021/01/18/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7h5%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://Lifuzhen.github.io/2021/01/18/微信公众号h5跳转小程序/</id>
    <published>2021-01-18T12:21:39.000Z</published>
    <updated>2022-05-24T10:35:59.460Z</updated>
    
    <content type="html"><![CDATA[<p> 最近在公司做活动，遇到了h5活动页面唤起小程序的需求, 找了资料，发现了wx-open-launch-open。<br> <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html" target="_blank" rel="noopener">微信官方文档</a> 支持了这种跳转，不过对微信版本、系统版本都有要求。</p><p> 因为需求需要判断当前用户是否支持，不支持则显示别的内容，支持就点击后直接跳转到小程序。开始我的探索路</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p> 这个微信官方文档里面说的很清楚，登录<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p><h2 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h2><p> 在需要调用JS接口的页面引入如下JS文件：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）</p><p> 如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）</p><p> 备注：支持使用 AMD/CMD 标准模块加载方法加载<br> （ps：因为我们的h5页面是https， 所以引入的连接要是https的，不然会有问题呦）</p><h2 id="通过config接口注入权限验证配置并申请所需开放标签"><a href="#通过config接口注入权限验证配置并申请所需开放标签" class="headerlink" title="通过config接口注入权限验证配置并申请所需开放标签"></a>通过config接口注入权限验证配置并申请所需开放标签</h2><p> 与使用JS-SDK配置方式相同，所有需要使用开放标签的页面必须先注入配置信息，并通过openTagList字段申请所需要的开放标签，否则将无法使用（同一个url仅需调用一次）。开放标签的申请和JS接口的申请相互独立，因此是可以同时申请的。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印</span><br><span class="line">  appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class="line">  timestamp: , // 必填，生成签名的时间戳</span><br><span class="line">  nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class="line">  signature: &apos;&apos;,// 必填，签名</span><br><span class="line">  jsApiList: [], // 必填，需要使用的JS接口列表</span><br><span class="line">  openTagList: [] // 可选，需要使用的开放标签列表，例如[&apos;wx-open-launch-app&apos;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="通过ready接口处理成功验证"><a href="#通过ready接口处理成功验证" class="headerlink" title="通过ready接口处理成功验证"></a>通过ready接口处理成功验证</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(function () &#123;</span><br><span class="line">  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="通过error接口处理失败验证"><a href="#通过error接口处理失败验证" class="headerlink" title="通过error接口处理失败验证"></a>通过error接口处理失败验证</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.error(function (res) &#123;</span><br><span class="line">  // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>所有开放标签都能像普通的HTML标签一样在页面中直接使用，不需要再进行额外的处理。</p><blockquote><p>(ps: 我们使用的是react，所有也是使用的script)</p></blockquote><p>对于标签事件，均可通过event.detail获得详细信息。如果无特殊说明，下文标签事件说明中的返回值均指代event.detail中的内容。</p><p>另外，需要注意以下几点：如果所使用的标签允许提供插槽，由于插槽中模版的样式是和页面隔离的，因此需要注意在插槽中定义模版的样式。插槽模版及样式均需要通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>进行包裹。对于Vue等视图框架，为了避免template标签冲突的问题，可使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/wxtag-template&quot;&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure></p><p>进行代替，来包裹插槽模版和样式。另外，对于具名插槽还需要通过slot属性声明插槽名称，下文标签插槽中的default插槽为默认插槽，可不声明插槽名称。</p><p>页面中与布局和定位相关的样式，如position: fixed; top -100;等，尽量不要写在插槽模版的节点中，请声明在标签或其父节点上；<br>对于有CSP要求的页面，需要添加白名单frame-src https://*.qq.com webcompt:，才能在页面中正常使用开放标签。</p><h1 id="使用过程中的问题"><a href="#使用过程中的问题" class="headerlink" title="使用过程中的问题"></a>使用过程中的问题</h1><h2 id="跳转小程序按钮没有显示"><a href="#跳转小程序按钮没有显示" class="headerlink" title="跳转小程序按钮没有显示"></a>跳转小程序按钮没有显示</h2><p>没有起作用有好几个方便的原因：<br>1.微信公众号必须是服务号。要在公众号后台配置js安全域名  和 ip白名单<br>2.真机测试，才会显示（我使用微信开发者工具也不会显示的）<br>3、username=小程序的原始id，以gh开头的，不是小程序wx开头的id<br>4、path=‘<strong>*</strong>.html’后面要以.html结尾（这个微信官方文档也有写）<br>5、openTagList: [“wx-open-launch-weapp”]    config配置参数必须填这个开放接口</p><h2 id="自定义图片按钮"><a href="#自定义图片按钮" class="headerlink" title="自定义图片按钮"></a>自定义图片按钮</h2><p>1、图片连接必须是线上的，不能是本地图片，不然不会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;banner-button&quot;&gt;</span><br><span class="line">    &lt;wx-open-launch-weapp</span><br><span class="line">        id=&quot;launch-btn&quot;</span><br><span class="line">        username=&#123;this.state.miniUsername&#125;</span><br><span class="line">        path=&#123;this.state.miniPath&#125;</span><br><span class="line">        style=&#123;&#123;width: &quot;150px&quot;, height: &quot;32px&quot;, fontSize: &quot;23px&quot;&#125;&#125;&gt;</span><br><span class="line">        &lt;script type=&quot;text/wxtag-template&quot;&gt;</span><br><span class="line">            &lt;img style=&#123;&#123;width: &quot;100%&quot;&#125;&#125; src=&quot;https://images-1254198035.cos.ap-shanghai.myqcloud.com/qipai/btn.png&quot; alt=&quot;&quot;/&gt; (线上图片会显示)</span><br><span class="line">            &lt;img style=&#123;&#123;width: &quot;100%&quot;&#125;&#125; src=&quot;../image/btn.png&quot; alt=&quot;&quot;/&gt;(本地图片不会显示)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/wx-open-launch-weapp&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="跳转小程序按钮样式不起作用"><a href="#跳转小程序按钮样式不起作用" class="headerlink" title="跳转小程序按钮样式不起作用"></a>跳转小程序按钮样式不起作用</h2><p>注意：样式无法写在外面，只能使用内联样式。固定大小的样式不支持rem单位，不会继承样式</p><h2 id="判断当前是否支持wx-open-launch-open按钮-手机不支持wx-open-launch-open"><a href="#判断当前是否支持wx-open-launch-open按钮-手机不支持wx-open-launch-open" class="headerlink" title="判断当前是否支持wx-open-launch-open按钮(手机不支持wx-open-launch-open)"></a>判断当前是否支持wx-open-launch-open按钮(手机不支持wx-open-launch-open)</h2><p>因为需要对不支持wx-open-launch-open按钮的做判断，显示另一个页面，所以需要判断当前手机是否支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// wx-open-launch-weapp按钮 微信版本要求为：7.0.12及以上。 系统版本要求为：iOS 10.3及以上、Android 5.0及以上。</span><br><span class="line">  var wechatInfo = navigator.userAgent.match(/MicroMessenger\/([\d\.]+)/i);</span><br><span class="line">  console.log(&quot;wechatInfo:&quot;, wechatInfo &amp;&amp; wechatInfo[1]);</span><br><span class="line">  // Android 5.0及以上</span><br><span class="line">  var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">  console.log(ua);</span><br><span class="line">  if (!wechatInfo) &#123;</span><br><span class="line">      console.log(&quot;仅支持微信&quot;) ;</span><br><span class="line">  &#125; else if (wechatInfo[1] &lt; &quot;7.0.12&quot;) &#123;</span><br><span class="line">      console.log(&quot;微信版本要求7.0.12及以上版本&quot;)</span><br><span class="line">  &#125; else if (/android/i.test(navigator.userAgent)) &#123;</span><br><span class="line">      var test = /android\s([\w.]+)/;//IE</span><br><span class="line">      var match = test.exec(ua);</span><br><span class="line">      console.log(match);</span><br><span class="line">      document.write(&quot;This is Android &quot; + match[1] + &quot; browser.&quot;); //这是Android平台下浏览器</span><br><span class="line">      var version = match[1].split(&quot;.&quot;)[0];</span><br><span class="line">      if (version &lt; 5) &#123;</span><br><span class="line">          console.log(&apos;Android系统要求5.0及以上版本&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; else if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) &#123;</span><br><span class="line">      var test = /os\s([\w_]+)/;//IE</span><br><span class="line">      var match = test.exec(ua);</span><br><span class="line">      var version = match[1].split(&quot;_&quot;)[0] + &quot;.&quot; + match[1].split(&quot;_&quot;)[1];</span><br><span class="line">      console.log(version);</span><br><span class="line">      if (version &lt; 10.4) &#123;</span><br><span class="line">          console.log(&apos;ios系统要求10.3及以上版本&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>很多东西网上都是可以找到的， 这里面大部分内容都是我在网上可以看到的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 最近在公司做活动，遇到了h5活动页面唤起小程序的需求, 找了资料，发现了wx-open-launch-open。&lt;br&gt; &lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wecha
      
    
    </summary>
    
    
      <category term="公众号" scheme="https://Lifuzhen.github.io/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="h5" scheme="https://Lifuzhen.github.io/tags/h5/"/>
    
      <category term="小程序" scheme="https://Lifuzhen.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>react-json-view</title>
    <link href="https://Lifuzhen.github.io/2020/11/27/react-json-view/"/>
    <id>https://Lifuzhen.github.io/2020/11/27/react-json-view/</id>
    <published>2020-11-27T03:45:06.000Z</published>
    <updated>2022-05-24T10:35:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-json-view-rjv"><a href="#react-json-view-rjv" class="headerlink" title="react-json-view(rjv)"></a>react-json-view(rjv)</h2><p>最近项目上引入了一个json解析的插件，我就把这个插件应用到了原来只有技术看的代码块上，现在在去看那个代码块，感觉清晰好多~<br>很棒的一个插件，简单介绍下这个插件<br><a href="https://www.npmjs.com/package/react-json-view" target="_blank" rel="noopener">npm地址</a></p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p> npm install react-json-view</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>“dependencies”: {<br>    “react-json-view”: “latest”<br>}</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactJson from &quot;react-json-view&quot;;</span><br><span class="line"></span><br><span class="line">class ReactJsonView extends React.Component&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        my_json_object: &#123;</span><br><span class="line">            &quot;string&quot;: &quot;this is a test string&quot;,</span><br><span class="line">            &quot;integer&quot;: 42,</span><br><span class="line">            &quot;array&quot;: [1,2,3,&quot;test&quot;,null],</span><br><span class="line">            &quot;float&quot;: 3.14159,</span><br><span class="line">            &quot;object&quot;: &#123;&quot;first-child&quot;: true,&quot;second-child&quot;: false,&quot;last-child&quot;: null&#125;,</span><br><span class="line">            &quot;string_number&quot;: &quot;1234&quot;,</span><br><span class="line">            &quot;date&quot;: &quot;2020-12-01T04:02:13.464Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;ReactJson src=&#123;this.state.my_json_object&#125; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ReactJsonView;</span><br></pre></td></tr></table></figure><p>代码运行结果：<br><img src="/2020/11/27/react-json-view/result01.jpg" alt=""></p><h2 id="属性简介"><a href="#属性简介" class="headerlink" title="属性简介"></a>属性简介</h2><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><pre><code>类型： json对象默认值： 没有描述：这里的值显示的是json数据</code></pre><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><pre><code>类型：string或这个是false默认值： &quot;root&quot;描述： 这里是根节点的名字，如果取值为null或者false则没有名字</code></pre><h4 id="name取值对比图"><a href="#name取值对比图" class="headerlink" title="name取值对比图"></a>name取值对比图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ReactJson</span><br><span class="line">    src=&#123;this.state.my_json_object&#125;</span><br><span class="line">    name=&#123;false&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/27/react-json-view/name.jpg" alt=""></p><h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><pre><code>类型：string默认值：rjv-default描述：rjv支持base-16主题。包括（apathy，apathy:inverted，ashes，bespin，brewer，bright:inverted，bright，chalk，codeschool，colors，eighties，embers，flat，google，grayscale，grayscale:inverted，greenscreen，harmonic，hopscotch，isotope，marrakesh，mocha，monokai，ocean，paraiso，pop，railscasts，rjv-default，shapeshifter，shapeshifter:inverted，solarized，summerfruit，summerfruit:inverted，threezerotwofour，tomorrow，tube，twilight）</code></pre><h4 id="theme取值对比图"><a href="#theme取值对比图" class="headerlink" title="theme取值对比图"></a>theme取值对比图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ReactJson</span><br><span class="line">   src=&#123;this.state.my_json_object&#125;</span><br><span class="line">   name=&#123;false&#125;</span><br><span class="line">   theme=&quot;shapeshifter&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/27/react-json-view/theme.jpg" alt=""></p><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><pre><code>类型：object默认值：{}描述：可以通过style添加、修改样式，可覆盖主题默认提供的属性</code></pre><h3 id="iconStyle"><a href="#iconStyle" class="headerlink" title="iconStyle"></a>iconStyle</h3><pre><code>类型：string默认值：&quot;circle&quot;描述：接受参数:circle(圆)、triangle(三角形)、square(圆)</code></pre><p><img src="/2020/11/27/react-json-view/iconStyle.jpg" alt=""></p><h3 id="indentWidth"><a href="#indentWidth" class="headerlink" title="indentWidth"></a>indentWidth</h3><pre><code>类型：integer默认值：4描述：JSON嵌套对象的缩进值</code></pre><p><img src="/2020/11/27/react-json-view/indentWidth.jpg" alt=""></p><h3 id="collapsed"><a href="#collapsed" class="headerlink" title="collapsed"></a>collapsed</h3><pre><code>类型：boolean 或者 integer默认值：false描述：当设置为true，默认情况下，所有节点都将被折叠。使用整数值在特定深度折叠。</code></pre><p><img src="/2020/11/27/react-json-view/collapsed.jpg" alt=""></p><h3 id="collapseStringsAfterLength"><a href="#collapseStringsAfterLength" class="headerlink" title="collapseStringsAfterLength"></a>collapseStringsAfterLength</h3><pre><code>类型：integer默认值：false描述：这个就是超出内容会变成…的功能。当一个整数值被赋值时，字符串就会在这个长度后面接上省略号。可以通过单击字符串值来展开和折叠字符串内容</code></pre><h3 id="shouldCollapse"><a href="#shouldCollapse" class="headerlink" title="shouldCollapse"></a>shouldCollapse</h3><pre><code>类型：(field)=&gt;{}默认值：false描述：回调函数来提供对默认情况下应该折叠的对象和数组的控制。对象被传递给包含name, src, type(“数组”或“对象”)和namespace</code></pre><h3 id="groupArraysAfterLength"><a href="#groupArraysAfterLength" class="headerlink" title="groupArraysAfterLength"></a>groupArraysAfterLength</h3><pre><code>类型：integet默认值：100描述：当指定整数值时，数组将按值的计数分组显示。组以brakset符号显示，可以通过符号展开和折叠。</code></pre><p><img src="/2020/11/27/react-json-view/groupArrayAfterLength.jpg" alt=""></p><h3 id="enableClipboard"><a href="#enableClipboard" class="headerlink" title="enableClipboard"></a>enableClipboard</h3><pre><code>类型：boolean 或者 (copy)=&gt;{}默认值：true描述：当prop不为false时，用户可以通过单击剪贴板图标将对象和数组复制到剪贴板。支持复制回调。</code></pre><p><img src="/2020/11/27/react-json-view/enableClipboard.jpg" alt=""></p><h3 id="displayObjectSize"><a href="#displayObjectSize" class="headerlink" title="displayObjectSize"></a>displayObjectSize</h3><pre><code>类型：boolean默认值：true描述：当设置为true时，对象和数组将显示size</code></pre><p><img src="/2020/11/27/react-json-view/displayObjectSize.jpg" alt=""></p><h3 id="displayDataTypes"><a href="#displayDataTypes" class="headerlink" title="displayDataTypes"></a>displayDataTypes</h3><pre><code>类型：boolean默认值：true描述：当设置为true，value前面显示数据类型</code></pre><p><img src="/2020/11/27/react-json-view/displayDataTypes.jpg" alt=""></p><h3 id="onEdit"><a href="#onEdit" class="headerlink" title="onEdit"></a>onEdit</h3><pre><code>类型：(edit)=&gt;{}默认值：false描述：当传入回调函数时，edit功能已启用。在编辑完成之后调用回调。</code></pre><p><img src="/2020/11/27/react-json-view/onEdit.jpg" alt=""></p><h3 id="onAdd"><a href="#onAdd" class="headerlink" title="onAdd"></a>onAdd</h3><pre><code>类型：(add)=&gt;{}默认值：false描述：当传入回调函数时，add功能已启用。在完成添加之后调用回调。</code></pre><p><img src="/2020/11/27/react-json-view/onAdd.jpg" alt=""></p><h3 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h3><pre><code>类型：string||number||boolean||array||object默认值：null描述：设置添加到json时的默认值</code></pre><h3 id="onDelete"><a href="#onDelete" class="headerlink" title="onDelete"></a>onDelete</h3><pre><code>类型：(delete)=&gt;{}默认值：false描述：当传入回调函数时，delete功能已启用。在完成删除之后调用回调。</code></pre><p><img src="/2020/11/27/react-json-view/onDelete.jpg" alt=""></p><h3 id="onSelect"><a href="#onSelect" class="headerlink" title="onSelect"></a>onSelect</h3><pre><code>类型：(select)=&gt;{}默认值：false描述：当传入函数时，单击值将触发onSelect方法将被调用。</code></pre><h3 id="sortKeys"><a href="#sortKeys" class="headerlink" title="sortKeys"></a>sortKeys</h3><pre><code>类型：boolean默认值：false描述：当设置为true，根据对象的key排序</code></pre><p><img src="/2020/11/27/react-json-view/sortKeys.jpg" alt=""></p><h3 id="validationMessage"><a href="#validationMessage" class="headerlink" title="validationMessage"></a>validationMessage</h3><pre><code>类型：string默认值：“Validation Error”描述：针对OneEdit、onAdd或onDelete回调的验证失败的自定义消息</code></pre><p><a href="https://mac-s-g.github.io/react-json-view/demo/dist/" target="_blank" rel="noopener">Check out the list of supported themes in the component demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react-json-view-rjv&quot;&gt;&lt;a href=&quot;#react-json-view-rjv&quot; class=&quot;headerlink&quot; title=&quot;react-json-view(rjv)&quot;&gt;&lt;/a&gt;react-json-view(rjv)&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="插件" scheme="https://Lifuzhen.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ios手机不兼容摇一摇功能</title>
    <link href="https://Lifuzhen.github.io/2020/11/12/ios%E6%89%8B%E6%9C%BA%E4%B8%8D%E5%85%BC%E5%AE%B9%E6%91%87%E4%B8%80%E6%91%87%E5%8A%9F%E8%83%BD/"/>
    <id>https://Lifuzhen.github.io/2020/11/12/ios手机不兼容摇一摇功能/</id>
    <published>2020-11-12T14:22:59.000Z</published>
    <updated>2022-05-24T10:35:59.874Z</updated>
    
    <content type="html"><![CDATA[<p>过年后回来的时候做了一个摇一摇的H5小游戏。因为我使用的是安卓手机，一直没有发现在苹果手机上不能使用。<br>刚开是以为是http和https的问题，但是在ios上即使使用https开头的链接然后还是不能摇~</p><p>后来网上找了原因说是ios13+的版本，浏览器对设备运动和方向事件的访问权限处于关闭状态，但是可以请求这种权限，类似于请求相机权限吧。</p><p>因此，在IOS13+的移动端中，需要在DeviceMotionEvent上调用requestPermission这个方法，该方法请求用户当前来源的权限以显示通知，然后根据用户的不同选择，触发不同的状态【granted（被授予），denied（被拒绝） 或者default（默认）】，并返回一个Promise对象。</p><blockquote><p>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  var ua = navigator.userAgent.toLowerCase();</span><br><span class="line"> if (ua.indexOf(&quot;like mac os x&quot;) &gt; 0) &#123;</span><br><span class="line">     var reg = /os [\d._]*/gi;</span><br><span class="line">     var verinfo = ua.match(reg);</span><br><span class="line">     var version = (verinfo + &quot;&quot;).replace(/[^0-9|_.]/ig, &quot;&quot;).replace(/_/ig, &quot;.&quot;);</span><br><span class="line">     var arr = version.split(&quot;.&quot;);</span><br><span class="line">     if (arr[0] &gt; 13) &#123;  //对13以后的版本处理,</span><br><span class="line">         DeviceMotionEvent.requestPermission().then(permissionState =&gt; &#123;</span><br><span class="line">             if (permissionState === &quot;granted&quot;) &#123;</span><br><span class="line">                 alert(&quot;你授权了，可以进行摇一摇啦&quot;);</span><br><span class="line">             &#125;</span><br><span class="line">             if (permissionState === &quot;denied&quot;) &#123;</span><br><span class="line">                 alert(&quot;你拒绝了&quot;);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;).catch((err) =&gt; &#123;</span><br><span class="line">             //======这里可以防止重复授权，因为获取权限需要点击事件才能触发===//</span><br><span class="line">             Modal.warning(&#123;</span><br><span class="line">                 title: &apos;获取授权&apos;,</span><br><span class="line">                 content: &apos;请在接下来的然窗中允许授权，否则将无法正常进行摇一摇&apos;,</span><br><span class="line">                 onOk() &#123;</span><br><span class="line">                     reqShakePermission();</span><br><span class="line">                 &#125;,</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125; else &#123;  //13以前的版本</span><br><span class="line">         alert(&quot;你的手机支持摇一摇&quot;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line">     </span><br><span class="line">function reqShakePermission() &#123;</span><br><span class="line">    if (typeof DeviceMotionEvent.requestPermission === &quot;function&quot;) &#123;</span><br><span class="line">        DeviceMotionEvent.requestPermission().then((permissionState) =&gt; &#123;</span><br><span class="line">            if (permissionState === &quot;granted&quot;) &#123;</span><br><span class="line">                var speed = 15;    // 用来判定的加速度阈值，太大了则很难触发</span><br><span class="line">                var x, y, z, lastX, lastY, lastZ;</span><br><span class="line">                x = y = z = lastX = lastY = lastZ = 0;</span><br><span class="line">                window.addEventListener(&quot;devicemotion&quot;, function (event) &#123;</span><br><span class="line">                    var acceleration = event.accelerationIncludingGravity;</span><br><span class="line">                    x = acceleration.x;</span><br><span class="line">                    y = acceleration.y;</span><br><span class="line">                    if (self.state.clickStatus) &#123;</span><br><span class="line">                        if (Math.abs(x - lastX) &gt; speed || Math.abs(y - lastY) &gt; speed) &#123;</span><br><span class="line">                            // 用户设备摇动了，触发响应操作</span><br><span class="line">                            // 此处的判断依据是用户设备的加速度大于我们设置的阈值</span><br><span class="line">                                alert(&quot;摇动了手机&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;//如果已经生成了结果就不需要再重新生成了</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    lastX = x;</span><br><span class="line">                    lastY = y;</span><br><span class="line">                &#125;, false);</span><br><span class="line">            &#125; else if (permissionState == &quot;denied&quot;) &#123;</span><br><span class="line">                alert(&quot;拒绝喽&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).catch((error) =&gt; &#123;</span><br><span class="line">            // console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 处理常规的非iOS 13+设备</span><br><span class="line">        // console.log(&quot;处理常规的非iOS 13+设备&quot;);</span><br><span class="line">        if (window.DeviceMotionEvent) &#123;</span><br><span class="line">            alert(&quot;可以进行摇一摇&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // console.log(&apos;不支持window.DeviceMotionEvent&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>效果图：<br><img src="/2020/11/12/ios手机不兼容摇一摇功能/allow.jpg" alt=""></p></blockquote><p>PS：点击允许即可使用摇一摇功能。如果拒绝，需要在关掉这个进程再次进入页面才会再次询问。否则一直用不了摇一摇功能哦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;过年后回来的时候做了一个摇一摇的H5小游戏。因为我使用的是安卓手机，一直没有发现在苹果手机上不能使用。&lt;br&gt;刚开是以为是http和https的问题，但是在ios上即使使用https开头的链接然后还是不能摇~&lt;/p&gt;
&lt;p&gt;后来网上找了原因说是ios13+的版本，浏览器对设
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>inline-block间隙</title>
    <link href="https://Lifuzhen.github.io/2020/07/09/inline-block%E9%97%B4%E9%9A%99/"/>
    <id>https://Lifuzhen.github.io/2020/07/09/inline-block间隙/</id>
    <published>2020-07-09T11:12:04.000Z</published>
    <updated>2022-05-24T10:35:59.839Z</updated>
    
    <content type="html"><![CDATA[<p>我针对一些元素使用inline-block要比float频繁。img标签本身就是inline-block属性，所以页面中使用到img标签的时候经常会出现间隙问题。<br>最近写的h5页面多了，遇到这个问题的次数就越来越多了。<br>最典型的就是图片，当我两个图片要连接时，中间就出现了缝隙。审查元素我并没有设置间距。然后就找问题的原因，发现是典型的换行符/空格间隙问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;!--适应移动端--&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;!--css样式--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">ul&#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: #108ee9;</span><br><span class="line">    color: #ffffff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;llll&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;ffff&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;zzzz&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;7777&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;1111&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;9999&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/inline-block间隙/01.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我针对一些元素使用inline-block要比float频繁。img标签本身就是inline-block属性，所以页面中使用到img标签的时候经常会出现间隙问题。&lt;br&gt;最近写的h5页面多了，遇到这个问题的次数就越来越多了。&lt;br&gt;最典型的就是图片，当我两个图片要连接时，中
      
    
    </summary>
    
    
  </entry>
  
</feed>
